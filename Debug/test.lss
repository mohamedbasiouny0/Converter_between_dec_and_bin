
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000310c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  0000310c  00003180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021b4  00000000  00000000  000031d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c29  00000000  00000000  00005388  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018e  00000000  00000000  00006111  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ec8  00000000  00000000  0000629f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001045  00000000  00000000  00008167  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e80  00000000  00000000  000091ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a02c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000295  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080a  00000000  00000000  0000a441  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ac4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <main>
      7a:	0c 94 84 18 	jmp	0x3108	; 0x3108 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e9       	ldi	r26, 0x9C	; 156
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 25 04 	call	0x84a	; 0x84a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 25 04 	call	0x84a	; 0x84a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e9       	ldi	r24, 0x9C	; 156
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 25 04 	call	0x84a	; 0x84a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__epilogue_restores__>

00000622 <__eqsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__eqsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__eqsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 72 05 	call	0xae4	; 0xae4 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__eqsf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__+0x18>

00000682 <__gtsf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gtsf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gtsf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 72 05 	call	0xae4	; 0xae4 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gtsf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__+0x18>

000006e2 <__gesf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gesf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gesf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 72 05 	call	0xae4	; 0xae4 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gesf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__+0x18>

00000742 <__ltsf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__ltsf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__ltsf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 72 05 	call	0xae4	; 0xae4 <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__ltsf2+0x58>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__+0x18>

000007a2 <__fixsfsi>:
     7a2:	ac e0       	ldi	r26, 0x0C	; 12
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__prologue_saves__+0x20>
     7ae:	69 83       	std	Y+1, r22	; 0x01
     7b0:	7a 83       	std	Y+2, r23	; 0x02
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	be 01       	movw	r22, r28
     7bc:	6b 5f       	subi	r22, 0xFB	; 251
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__unpack_f>
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	61 f1       	breq	.+88     	; 0x822 <__fixsfsi+0x80>
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	50 f1       	brcs	.+84     	; 0x822 <__fixsfsi+0x80>
     7ce:	84 30       	cpi	r24, 0x04	; 4
     7d0:	21 f4       	brne	.+8      	; 0x7da <__fixsfsi+0x38>
     7d2:	8e 81       	ldd	r24, Y+6	; 0x06
     7d4:	88 23       	and	r24, r24
     7d6:	51 f1       	breq	.+84     	; 0x82c <__fixsfsi+0x8a>
     7d8:	2e c0       	rjmp	.+92     	; 0x836 <__fixsfsi+0x94>
     7da:	2f 81       	ldd	r18, Y+7	; 0x07
     7dc:	38 85       	ldd	r19, Y+8	; 0x08
     7de:	37 fd       	sbrc	r19, 7
     7e0:	20 c0       	rjmp	.+64     	; 0x822 <__fixsfsi+0x80>
     7e2:	6e 81       	ldd	r22, Y+6	; 0x06
     7e4:	2f 31       	cpi	r18, 0x1F	; 31
     7e6:	31 05       	cpc	r19, r1
     7e8:	1c f0       	brlt	.+6      	; 0x7f0 <__fixsfsi+0x4e>
     7ea:	66 23       	and	r22, r22
     7ec:	f9 f0       	breq	.+62     	; 0x82c <__fixsfsi+0x8a>
     7ee:	23 c0       	rjmp	.+70     	; 0x836 <__fixsfsi+0x94>
     7f0:	8e e1       	ldi	r24, 0x1E	; 30
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	82 1b       	sub	r24, r18
     7f6:	93 0b       	sbc	r25, r19
     7f8:	29 85       	ldd	r18, Y+9	; 0x09
     7fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7fc:	4b 85       	ldd	r20, Y+11	; 0x0b
     7fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     800:	04 c0       	rjmp	.+8      	; 0x80a <__fixsfsi+0x68>
     802:	56 95       	lsr	r21
     804:	47 95       	ror	r20
     806:	37 95       	ror	r19
     808:	27 95       	ror	r18
     80a:	8a 95       	dec	r24
     80c:	d2 f7       	brpl	.-12     	; 0x802 <__fixsfsi+0x60>
     80e:	66 23       	and	r22, r22
     810:	b1 f0       	breq	.+44     	; 0x83e <__fixsfsi+0x9c>
     812:	50 95       	com	r21
     814:	40 95       	com	r20
     816:	30 95       	com	r19
     818:	21 95       	neg	r18
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	4f 4f       	sbci	r20, 0xFF	; 255
     81e:	5f 4f       	sbci	r21, 0xFF	; 255
     820:	0e c0       	rjmp	.+28     	; 0x83e <__fixsfsi+0x9c>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	09 c0       	rjmp	.+18     	; 0x83e <__fixsfsi+0x9c>
     82c:	2f ef       	ldi	r18, 0xFF	; 255
     82e:	3f ef       	ldi	r19, 0xFF	; 255
     830:	4f ef       	ldi	r20, 0xFF	; 255
     832:	5f e7       	ldi	r21, 0x7F	; 127
     834:	04 c0       	rjmp	.+8      	; 0x83e <__fixsfsi+0x9c>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e8       	ldi	r21, 0x80	; 128
     83e:	b9 01       	movw	r22, r18
     840:	ca 01       	movw	r24, r20
     842:	2c 96       	adiw	r28, 0x0c	; 12
     844:	e2 e0       	ldi	r30, 0x02	; 2
     846:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__epilogue_restores__+0x20>

0000084a <__pack_f>:
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	fc 01       	movw	r30, r24
     856:	e4 80       	ldd	r14, Z+4	; 0x04
     858:	f5 80       	ldd	r15, Z+5	; 0x05
     85a:	06 81       	ldd	r16, Z+6	; 0x06
     85c:	17 81       	ldd	r17, Z+7	; 0x07
     85e:	d1 80       	ldd	r13, Z+1	; 0x01
     860:	80 81       	ld	r24, Z
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	48 f4       	brcc	.+18     	; 0x878 <__stack+0x19>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a0 e1       	ldi	r26, 0x10	; 16
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	e8 2a       	or	r14, r24
     870:	f9 2a       	or	r15, r25
     872:	0a 2b       	or	r16, r26
     874:	1b 2b       	or	r17, r27
     876:	a5 c0       	rjmp	.+330    	; 0x9c2 <__stack+0x163>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	09 f4       	brne	.+2      	; 0x87e <__stack+0x1f>
     87c:	9f c0       	rjmp	.+318    	; 0x9bc <__stack+0x15d>
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	21 f4       	brne	.+8      	; 0x88a <__stack+0x2b>
     882:	ee 24       	eor	r14, r14
     884:	ff 24       	eor	r15, r15
     886:	87 01       	movw	r16, r14
     888:	05 c0       	rjmp	.+10     	; 0x894 <__stack+0x35>
     88a:	e1 14       	cp	r14, r1
     88c:	f1 04       	cpc	r15, r1
     88e:	01 05       	cpc	r16, r1
     890:	11 05       	cpc	r17, r1
     892:	19 f4       	brne	.+6      	; 0x89a <__stack+0x3b>
     894:	e0 e0       	ldi	r30, 0x00	; 0
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	96 c0       	rjmp	.+300    	; 0x9c6 <__stack+0x167>
     89a:	62 81       	ldd	r22, Z+2	; 0x02
     89c:	73 81       	ldd	r23, Z+3	; 0x03
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	62 38       	cpi	r22, 0x82	; 130
     8a2:	79 07       	cpc	r23, r25
     8a4:	0c f0       	brlt	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	5b c0       	rjmp	.+182    	; 0x95e <__stack+0xff>
     8a8:	22 e8       	ldi	r18, 0x82	; 130
     8aa:	3f ef       	ldi	r19, 0xFF	; 255
     8ac:	26 1b       	sub	r18, r22
     8ae:	37 0b       	sbc	r19, r23
     8b0:	2a 31       	cpi	r18, 0x1A	; 26
     8b2:	31 05       	cpc	r19, r1
     8b4:	2c f0       	brlt	.+10     	; 0x8c0 <__stack+0x61>
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	2a c0       	rjmp	.+84     	; 0x914 <__stack+0xb5>
     8c0:	b8 01       	movw	r22, r16
     8c2:	a7 01       	movw	r20, r14
     8c4:	02 2e       	mov	r0, r18
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <__stack+0x71>
     8c8:	76 95       	lsr	r23
     8ca:	67 95       	ror	r22
     8cc:	57 95       	ror	r21
     8ce:	47 95       	ror	r20
     8d0:	0a 94       	dec	r0
     8d2:	d2 f7       	brpl	.-12     	; 0x8c8 <__stack+0x69>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	a0 e0       	ldi	r26, 0x00	; 0
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	aa 1f       	adc	r26, r26
     8e4:	bb 1f       	adc	r27, r27
     8e6:	2a 95       	dec	r18
     8e8:	d2 f7       	brpl	.-12     	; 0x8de <__stack+0x7f>
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	a1 09       	sbc	r26, r1
     8ee:	b1 09       	sbc	r27, r1
     8f0:	8e 21       	and	r24, r14
     8f2:	9f 21       	and	r25, r15
     8f4:	a0 23       	and	r26, r16
     8f6:	b1 23       	and	r27, r17
     8f8:	00 97       	sbiw	r24, 0x00	; 0
     8fa:	a1 05       	cpc	r26, r1
     8fc:	b1 05       	cpc	r27, r1
     8fe:	21 f0       	breq	.+8      	; 0x908 <__stack+0xa9>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	9a 01       	movw	r18, r20
     90a:	ab 01       	movw	r20, r22
     90c:	28 2b       	or	r18, r24
     90e:	39 2b       	or	r19, r25
     910:	4a 2b       	or	r20, r26
     912:	5b 2b       	or	r21, r27
     914:	da 01       	movw	r26, r20
     916:	c9 01       	movw	r24, r18
     918:	8f 77       	andi	r24, 0x7F	; 127
     91a:	90 70       	andi	r25, 0x00	; 0
     91c:	a0 70       	andi	r26, 0x00	; 0
     91e:	b0 70       	andi	r27, 0x00	; 0
     920:	80 34       	cpi	r24, 0x40	; 64
     922:	91 05       	cpc	r25, r1
     924:	a1 05       	cpc	r26, r1
     926:	b1 05       	cpc	r27, r1
     928:	39 f4       	brne	.+14     	; 0x938 <__stack+0xd9>
     92a:	27 ff       	sbrs	r18, 7
     92c:	09 c0       	rjmp	.+18     	; 0x940 <__stack+0xe1>
     92e:	20 5c       	subi	r18, 0xC0	; 192
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	4f 4f       	sbci	r20, 0xFF	; 255
     934:	5f 4f       	sbci	r21, 0xFF	; 255
     936:	04 c0       	rjmp	.+8      	; 0x940 <__stack+0xe1>
     938:	21 5c       	subi	r18, 0xC1	; 193
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	4f 4f       	sbci	r20, 0xFF	; 255
     93e:	5f 4f       	sbci	r21, 0xFF	; 255
     940:	e0 e0       	ldi	r30, 0x00	; 0
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	3a 07       	cpc	r19, r26
     94a:	a0 e0       	ldi	r26, 0x00	; 0
     94c:	4a 07       	cpc	r20, r26
     94e:	a0 e4       	ldi	r26, 0x40	; 64
     950:	5a 07       	cpc	r21, r26
     952:	10 f0       	brcs	.+4      	; 0x958 <__stack+0xf9>
     954:	e1 e0       	ldi	r30, 0x01	; 1
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	79 01       	movw	r14, r18
     95a:	8a 01       	movw	r16, r20
     95c:	27 c0       	rjmp	.+78     	; 0x9ac <__stack+0x14d>
     95e:	60 38       	cpi	r22, 0x80	; 128
     960:	71 05       	cpc	r23, r1
     962:	64 f5       	brge	.+88     	; 0x9bc <__stack+0x15d>
     964:	fb 01       	movw	r30, r22
     966:	e1 58       	subi	r30, 0x81	; 129
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	d8 01       	movw	r26, r16
     96c:	c7 01       	movw	r24, r14
     96e:	8f 77       	andi	r24, 0x7F	; 127
     970:	90 70       	andi	r25, 0x00	; 0
     972:	a0 70       	andi	r26, 0x00	; 0
     974:	b0 70       	andi	r27, 0x00	; 0
     976:	80 34       	cpi	r24, 0x40	; 64
     978:	91 05       	cpc	r25, r1
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	39 f4       	brne	.+14     	; 0x98e <__stack+0x12f>
     980:	e7 fe       	sbrs	r14, 7
     982:	0d c0       	rjmp	.+26     	; 0x99e <__stack+0x13f>
     984:	80 e4       	ldi	r24, 0x40	; 64
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__stack+0x137>
     98e:	8f e3       	ldi	r24, 0x3F	; 63
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e8 0e       	add	r14, r24
     998:	f9 1e       	adc	r15, r25
     99a:	0a 1f       	adc	r16, r26
     99c:	1b 1f       	adc	r17, r27
     99e:	17 ff       	sbrs	r17, 7
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <__stack+0x14d>
     9a2:	16 95       	lsr	r17
     9a4:	07 95       	ror	r16
     9a6:	f7 94       	ror	r15
     9a8:	e7 94       	ror	r14
     9aa:	31 96       	adiw	r30, 0x01	; 1
     9ac:	87 e0       	ldi	r24, 0x07	; 7
     9ae:	16 95       	lsr	r17
     9b0:	07 95       	ror	r16
     9b2:	f7 94       	ror	r15
     9b4:	e7 94       	ror	r14
     9b6:	8a 95       	dec	r24
     9b8:	d1 f7       	brne	.-12     	; 0x9ae <__stack+0x14f>
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <__stack+0x167>
     9bc:	ee 24       	eor	r14, r14
     9be:	ff 24       	eor	r15, r15
     9c0:	87 01       	movw	r16, r14
     9c2:	ef ef       	ldi	r30, 0xFF	; 255
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	6e 2f       	mov	r22, r30
     9c8:	67 95       	ror	r22
     9ca:	66 27       	eor	r22, r22
     9cc:	67 95       	ror	r22
     9ce:	90 2f       	mov	r25, r16
     9d0:	9f 77       	andi	r25, 0x7F	; 127
     9d2:	d7 94       	ror	r13
     9d4:	dd 24       	eor	r13, r13
     9d6:	d7 94       	ror	r13
     9d8:	8e 2f       	mov	r24, r30
     9da:	86 95       	lsr	r24
     9dc:	49 2f       	mov	r20, r25
     9de:	46 2b       	or	r20, r22
     9e0:	58 2f       	mov	r21, r24
     9e2:	5d 29       	or	r21, r13
     9e4:	b7 01       	movw	r22, r14
     9e6:	ca 01       	movw	r24, r20
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	df 90       	pop	r13
     9f2:	08 95       	ret

000009f4 <__unpack_f>:
     9f4:	fc 01       	movw	r30, r24
     9f6:	db 01       	movw	r26, r22
     9f8:	40 81       	ld	r20, Z
     9fa:	51 81       	ldd	r21, Z+1	; 0x01
     9fc:	22 81       	ldd	r18, Z+2	; 0x02
     9fe:	62 2f       	mov	r22, r18
     a00:	6f 77       	andi	r22, 0x7F	; 127
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	22 1f       	adc	r18, r18
     a06:	22 27       	eor	r18, r18
     a08:	22 1f       	adc	r18, r18
     a0a:	93 81       	ldd	r25, Z+3	; 0x03
     a0c:	89 2f       	mov	r24, r25
     a0e:	88 0f       	add	r24, r24
     a10:	82 2b       	or	r24, r18
     a12:	28 2f       	mov	r18, r24
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	99 1f       	adc	r25, r25
     a18:	99 27       	eor	r25, r25
     a1a:	99 1f       	adc	r25, r25
     a1c:	11 96       	adiw	r26, 0x01	; 1
     a1e:	9c 93       	st	X, r25
     a20:	11 97       	sbiw	r26, 0x01	; 1
     a22:	21 15       	cp	r18, r1
     a24:	31 05       	cpc	r19, r1
     a26:	a9 f5       	brne	.+106    	; 0xa92 <__unpack_f+0x9e>
     a28:	41 15       	cp	r20, r1
     a2a:	51 05       	cpc	r21, r1
     a2c:	61 05       	cpc	r22, r1
     a2e:	71 05       	cpc	r23, r1
     a30:	11 f4       	brne	.+4      	; 0xa36 <__unpack_f+0x42>
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	37 c0       	rjmp	.+110    	; 0xaa4 <__unpack_f+0xb0>
     a36:	82 e8       	ldi	r24, 0x82	; 130
     a38:	9f ef       	ldi	r25, 0xFF	; 255
     a3a:	13 96       	adiw	r26, 0x03	; 3
     a3c:	9c 93       	st	X, r25
     a3e:	8e 93       	st	-X, r24
     a40:	12 97       	sbiw	r26, 0x02	; 2
     a42:	9a 01       	movw	r18, r20
     a44:	ab 01       	movw	r20, r22
     a46:	67 e0       	ldi	r22, 0x07	; 7
     a48:	22 0f       	add	r18, r18
     a4a:	33 1f       	adc	r19, r19
     a4c:	44 1f       	adc	r20, r20
     a4e:	55 1f       	adc	r21, r21
     a50:	6a 95       	dec	r22
     a52:	d1 f7       	brne	.-12     	; 0xa48 <__unpack_f+0x54>
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	8c 93       	st	X, r24
     a58:	0d c0       	rjmp	.+26     	; 0xa74 <__unpack_f+0x80>
     a5a:	22 0f       	add	r18, r18
     a5c:	33 1f       	adc	r19, r19
     a5e:	44 1f       	adc	r20, r20
     a60:	55 1f       	adc	r21, r21
     a62:	12 96       	adiw	r26, 0x02	; 2
     a64:	8d 91       	ld	r24, X+
     a66:	9c 91       	ld	r25, X
     a68:	13 97       	sbiw	r26, 0x03	; 3
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	13 96       	adiw	r26, 0x03	; 3
     a6e:	9c 93       	st	X, r25
     a70:	8e 93       	st	-X, r24
     a72:	12 97       	sbiw	r26, 0x02	; 2
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	38 07       	cpc	r19, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	48 07       	cpc	r20, r24
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	58 07       	cpc	r21, r24
     a82:	58 f3       	brcs	.-42     	; 0xa5a <__unpack_f+0x66>
     a84:	14 96       	adiw	r26, 0x04	; 4
     a86:	2d 93       	st	X+, r18
     a88:	3d 93       	st	X+, r19
     a8a:	4d 93       	st	X+, r20
     a8c:	5c 93       	st	X, r21
     a8e:	17 97       	sbiw	r26, 0x07	; 7
     a90:	08 95       	ret
     a92:	2f 3f       	cpi	r18, 0xFF	; 255
     a94:	31 05       	cpc	r19, r1
     a96:	79 f4       	brne	.+30     	; 0xab6 <__unpack_f+0xc2>
     a98:	41 15       	cp	r20, r1
     a9a:	51 05       	cpc	r21, r1
     a9c:	61 05       	cpc	r22, r1
     a9e:	71 05       	cpc	r23, r1
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <__unpack_f+0xb4>
     aa2:	84 e0       	ldi	r24, 0x04	; 4
     aa4:	8c 93       	st	X, r24
     aa6:	08 95       	ret
     aa8:	64 ff       	sbrs	r22, 4
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <__unpack_f+0xbe>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	8c 93       	st	X, r24
     ab0:	12 c0       	rjmp	.+36     	; 0xad6 <__unpack_f+0xe2>
     ab2:	1c 92       	st	X, r1
     ab4:	10 c0       	rjmp	.+32     	; 0xad6 <__unpack_f+0xe2>
     ab6:	2f 57       	subi	r18, 0x7F	; 127
     ab8:	30 40       	sbci	r19, 0x00	; 0
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	3c 93       	st	X, r19
     abe:	2e 93       	st	-X, r18
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	8c 93       	st	X, r24
     ac6:	87 e0       	ldi	r24, 0x07	; 7
     ac8:	44 0f       	add	r20, r20
     aca:	55 1f       	adc	r21, r21
     acc:	66 1f       	adc	r22, r22
     ace:	77 1f       	adc	r23, r23
     ad0:	8a 95       	dec	r24
     ad2:	d1 f7       	brne	.-12     	; 0xac8 <__unpack_f+0xd4>
     ad4:	70 64       	ori	r23, 0x40	; 64
     ad6:	14 96       	adiw	r26, 0x04	; 4
     ad8:	4d 93       	st	X+, r20
     ada:	5d 93       	st	X+, r21
     adc:	6d 93       	st	X+, r22
     ade:	7c 93       	st	X, r23
     ae0:	17 97       	sbiw	r26, 0x07	; 7
     ae2:	08 95       	ret

00000ae4 <__fpcmp_parts_f>:
     ae4:	1f 93       	push	r17
     ae6:	dc 01       	movw	r26, r24
     ae8:	fb 01       	movw	r30, r22
     aea:	9c 91       	ld	r25, X
     aec:	92 30       	cpi	r25, 0x02	; 2
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <__fpcmp_parts_f+0xe>
     af0:	47 c0       	rjmp	.+142    	; 0xb80 <__fpcmp_parts_f+0x9c>
     af2:	80 81       	ld	r24, Z
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	08 f4       	brcc	.+2      	; 0xafa <__fpcmp_parts_f+0x16>
     af8:	43 c0       	rjmp	.+134    	; 0xb80 <__fpcmp_parts_f+0x9c>
     afa:	94 30       	cpi	r25, 0x04	; 4
     afc:	51 f4       	brne	.+20     	; 0xb12 <__fpcmp_parts_f+0x2e>
     afe:	11 96       	adiw	r26, 0x01	; 1
     b00:	1c 91       	ld	r17, X
     b02:	84 30       	cpi	r24, 0x04	; 4
     b04:	99 f5       	brne	.+102    	; 0xb6c <__fpcmp_parts_f+0x88>
     b06:	81 81       	ldd	r24, Z+1	; 0x01
     b08:	68 2f       	mov	r22, r24
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	61 1b       	sub	r22, r17
     b0e:	71 09       	sbc	r23, r1
     b10:	3f c0       	rjmp	.+126    	; 0xb90 <__fpcmp_parts_f+0xac>
     b12:	84 30       	cpi	r24, 0x04	; 4
     b14:	21 f0       	breq	.+8      	; 0xb1e <__fpcmp_parts_f+0x3a>
     b16:	92 30       	cpi	r25, 0x02	; 2
     b18:	31 f4       	brne	.+12     	; 0xb26 <__fpcmp_parts_f+0x42>
     b1a:	82 30       	cpi	r24, 0x02	; 2
     b1c:	b9 f1       	breq	.+110    	; 0xb8c <__fpcmp_parts_f+0xa8>
     b1e:	81 81       	ldd	r24, Z+1	; 0x01
     b20:	88 23       	and	r24, r24
     b22:	89 f1       	breq	.+98     	; 0xb86 <__fpcmp_parts_f+0xa2>
     b24:	2d c0       	rjmp	.+90     	; 0xb80 <__fpcmp_parts_f+0x9c>
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	1c 91       	ld	r17, X
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	82 30       	cpi	r24, 0x02	; 2
     b2e:	f1 f0       	breq	.+60     	; 0xb6c <__fpcmp_parts_f+0x88>
     b30:	81 81       	ldd	r24, Z+1	; 0x01
     b32:	18 17       	cp	r17, r24
     b34:	d9 f4       	brne	.+54     	; 0xb6c <__fpcmp_parts_f+0x88>
     b36:	12 96       	adiw	r26, 0x02	; 2
     b38:	2d 91       	ld	r18, X+
     b3a:	3c 91       	ld	r19, X
     b3c:	13 97       	sbiw	r26, 0x03	; 3
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	93 81       	ldd	r25, Z+3	; 0x03
     b42:	82 17       	cp	r24, r18
     b44:	93 07       	cpc	r25, r19
     b46:	94 f0       	brlt	.+36     	; 0xb6c <__fpcmp_parts_f+0x88>
     b48:	28 17       	cp	r18, r24
     b4a:	39 07       	cpc	r19, r25
     b4c:	bc f0       	brlt	.+46     	; 0xb7c <__fpcmp_parts_f+0x98>
     b4e:	14 96       	adiw	r26, 0x04	; 4
     b50:	8d 91       	ld	r24, X+
     b52:	9d 91       	ld	r25, X+
     b54:	0d 90       	ld	r0, X+
     b56:	bc 91       	ld	r27, X
     b58:	a0 2d       	mov	r26, r0
     b5a:	24 81       	ldd	r18, Z+4	; 0x04
     b5c:	35 81       	ldd	r19, Z+5	; 0x05
     b5e:	46 81       	ldd	r20, Z+6	; 0x06
     b60:	57 81       	ldd	r21, Z+7	; 0x07
     b62:	28 17       	cp	r18, r24
     b64:	39 07       	cpc	r19, r25
     b66:	4a 07       	cpc	r20, r26
     b68:	5b 07       	cpc	r21, r27
     b6a:	18 f4       	brcc	.+6      	; 0xb72 <__fpcmp_parts_f+0x8e>
     b6c:	11 23       	and	r17, r17
     b6e:	41 f0       	breq	.+16     	; 0xb80 <__fpcmp_parts_f+0x9c>
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <__fpcmp_parts_f+0xa2>
     b72:	82 17       	cp	r24, r18
     b74:	93 07       	cpc	r25, r19
     b76:	a4 07       	cpc	r26, r20
     b78:	b5 07       	cpc	r27, r21
     b7a:	40 f4       	brcc	.+16     	; 0xb8c <__fpcmp_parts_f+0xa8>
     b7c:	11 23       	and	r17, r17
     b7e:	19 f0       	breq	.+6      	; 0xb86 <__fpcmp_parts_f+0xa2>
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	05 c0       	rjmp	.+10     	; 0xb90 <__fpcmp_parts_f+0xac>
     b86:	6f ef       	ldi	r22, 0xFF	; 255
     b88:	7f ef       	ldi	r23, 0xFF	; 255
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <__fpcmp_parts_f+0xac>
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	cb 01       	movw	r24, r22
     b92:	1f 91       	pop	r17
     b94:	08 95       	ret

00000b96 <keybad_inti>:
		{'n','0','=','+'}

};

void keybad_inti(void)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPortDirection(k_port,0x0f);
     b9e:	82 e4       	ldi	r24, 0x42	; 66
     ba0:	6f e0       	ldi	r22, 0x0F	; 15
     ba2:	0e 94 8a 11 	call	0x2314	; 0x2314 <MDIO_vidSetPortDirection>
	MDIO_vidSetPortvalue(k_port,0xff);
     ba6:	82 e4       	ldi	r24, 0x42	; 66
     ba8:	6f ef       	ldi	r22, 0xFF	; 255
     baa:	0e 94 cc 11 	call	0x2398	; 0x2398 <MDIO_vidSetPortvalue>
	//HCLCD_vidSendString("WELCOME MOHAMED");
	//_delay_ms(500);
}
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <keybad_PressKey>:

u8 keybad_PressKey(void)
{
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	61 97       	sbiw	r28, 0x11	; 17
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
	u8 pressed_key = NO_KEY ; //'O'
     bc8:	84 e5       	ldi	r24, 0x54	; 84
     bca:	89 8b       	std	Y+17, r24	; 0x11
	for(u8 row=0;row<4;row++)
     bcc:	18 8a       	std	Y+16, r1	; 0x10
     bce:	ac c0       	rjmp	.+344    	; 0xd28 <keybad_PressKey+0x174>
	{
		MDIO_vidSetPinValue(k_port,row,LOW);
     bd0:	82 e4       	ldi	r24, 0x42	; 66
     bd2:	68 89       	ldd	r22, Y+16	; 0x10
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	0e 94 07 10 	call	0x200e	; 0x200e <MDIO_vidSetPinValue>
		for(u8 col =0;col<4;col++)
     bda:	1f 86       	std	Y+15, r1	; 0x0f
     bdc:	99 c0       	rjmp	.+306    	; 0xd10 <keybad_PressKey+0x15c>
		{       //MDIO_vidGetPinValue(k_port,(col+4),&buffer);
			if(MDIO_vidGetPinValue(k_port,(col+4))==0)//if(buffer==0)
     bde:	8f 85       	ldd	r24, Y+15	; 0x0f
     be0:	98 2f       	mov	r25, r24
     be2:	9c 5f       	subi	r25, 0xFC	; 252
     be4:	82 e4       	ldi	r24, 0x42	; 66
     be6:	69 2f       	mov	r22, r25
     be8:	0e 94 11 11 	call	0x2222	; 0x2222 <MDIO_vidGetPinValue>
     bec:	88 23       	and	r24, r24
     bee:	91 f4       	brne	.+36     	; 0xc14 <keybad_PressKey+0x60>
			{
				pressed_key= KPD_arr[row][col];
     bf0:	88 89       	ldd	r24, Y+16	; 0x10
     bf2:	48 2f       	mov	r20, r24
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	ca 01       	movw	r24, r20
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	82 0f       	add	r24, r18
     c08:	93 1f       	adc	r25, r19
     c0a:	fc 01       	movw	r30, r24
     c0c:	ec 55       	subi	r30, 0x5C	; 92
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	80 81       	ld	r24, Z
     c12:	89 8b       	std	Y+17, r24	; 0x11
			}
			while(MDIO_vidGetPinValue(k_port,col+4)==0){}
     c14:	8f 85       	ldd	r24, Y+15	; 0x0f
     c16:	98 2f       	mov	r25, r24
     c18:	9c 5f       	subi	r25, 0xFC	; 252
     c1a:	82 e4       	ldi	r24, 0x42	; 66
     c1c:	69 2f       	mov	r22, r25
     c1e:	0e 94 11 11 	call	0x2222	; 0x2222 <MDIO_vidGetPinValue>
     c22:	88 23       	and	r24, r24
     c24:	b9 f3       	breq	.-18     	; 0xc14 <keybad_PressKey+0x60>
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e2       	ldi	r26, 0x20	; 32
     c2c:	b1 e4       	ldi	r27, 0x41	; 65
     c2e:	8b 87       	std	Y+11, r24	; 0x0b
     c30:	9c 87       	std	Y+12, r25	; 0x0c
     c32:	ad 87       	std	Y+13, r26	; 0x0d
     c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c36:	6b 85       	ldd	r22, Y+11	; 0x0b
     c38:	7c 85       	ldd	r23, Y+12	; 0x0c
     c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	4a ef       	ldi	r20, 0xFA	; 250
     c44:	54 e4       	ldi	r21, 0x44	; 68
     c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	8f 83       	std	Y+7, r24	; 0x07
     c50:	98 87       	std	Y+8, r25	; 0x08
     c52:	a9 87       	std	Y+9, r26	; 0x09
     c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c56:	6f 81       	ldd	r22, Y+7	; 0x07
     c58:	78 85       	ldd	r23, Y+8	; 0x08
     c5a:	89 85       	ldd	r24, Y+9	; 0x09
     c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e8       	ldi	r20, 0x80	; 128
     c64:	5f e3       	ldi	r21, 0x3F	; 63
     c66:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     c6a:	88 23       	and	r24, r24
     c6c:	2c f4       	brge	.+10     	; 0xc78 <keybad_PressKey+0xc4>
		__ticks = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
     c76:	3f c0       	rjmp	.+126    	; 0xcf6 <keybad_PressKey+0x142>
	else if (__tmp > 65535)
     c78:	6f 81       	ldd	r22, Y+7	; 0x07
     c7a:	78 85       	ldd	r23, Y+8	; 0x08
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	3f ef       	ldi	r19, 0xFF	; 255
     c84:	4f e7       	ldi	r20, 0x7F	; 127
     c86:	57 e4       	ldi	r21, 0x47	; 71
     c88:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     c8c:	18 16       	cp	r1, r24
     c8e:	4c f5       	brge	.+82     	; 0xce2 <keybad_PressKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c90:	6b 85       	ldd	r22, Y+11	; 0x0b
     c92:	7c 85       	ldd	r23, Y+12	; 0x0c
     c94:	8d 85       	ldd	r24, Y+13	; 0x0d
     c96:	9e 85       	ldd	r25, Y+14	; 0x0e
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e2       	ldi	r20, 0x20	; 32
     c9e:	51 e4       	ldi	r21, 0x41	; 65
     ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	9e 83       	std	Y+6, r25	; 0x06
     cb6:	8d 83       	std	Y+5, r24	; 0x05
     cb8:	0f c0       	rjmp	.+30     	; 0xcd8 <keybad_PressKey+0x124>
     cba:	88 ec       	ldi	r24, 0xC8	; 200
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <keybad_PressKey+0x112>
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	69 f7       	brne	.-38     	; 0xcba <keybad_PressKey+0x106>
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <keybad_PressKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce2:	6f 81       	ldd	r22, Y+7	; 0x07
     ce4:	78 85       	ldd	r23, Y+8	; 0x08
     ce6:	89 85       	ldd	r24, Y+9	; 0x09
     ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	9e 83       	std	Y+6, r25	; 0x06
     cf4:	8d 83       	std	Y+5, r24	; 0x05
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	9e 81       	ldd	r25, Y+6	; 0x06
     cfa:	9a 83       	std	Y+2, r25	; 0x02
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <keybad_PressKey+0x14e>
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
{
	u8 pressed_key = NO_KEY ; //'O'
	for(u8 row=0;row<4;row++)
	{
		MDIO_vidSetPinValue(k_port,row,LOW);
		for(u8 col =0;col<4;col++)
     d0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	8f 87       	std	Y+15, r24	; 0x0f
     d10:	8f 85       	ldd	r24, Y+15	; 0x0f
     d12:	84 30       	cpi	r24, 0x04	; 4
     d14:	08 f4       	brcc	.+2      	; 0xd18 <keybad_PressKey+0x164>
     d16:	63 cf       	rjmp	.-314    	; 0xbde <keybad_PressKey+0x2a>
			}
			while(MDIO_vidGetPinValue(k_port,col+4)==0){}
			_delay_ms(10);
		}

		MDIO_vidSetPinValue(k_port,row,HIGH);
     d18:	82 e4       	ldi	r24, 0x42	; 66
     d1a:	68 89       	ldd	r22, Y+16	; 0x10
     d1c:	41 e0       	ldi	r20, 0x01	; 1
     d1e:	0e 94 07 10 	call	0x200e	; 0x200e <MDIO_vidSetPinValue>
}

u8 keybad_PressKey(void)
{
	u8 pressed_key = NO_KEY ; //'O'
	for(u8 row=0;row<4;row++)
     d22:	88 89       	ldd	r24, Y+16	; 0x10
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	88 8b       	std	Y+16, r24	; 0x10
     d28:	88 89       	ldd	r24, Y+16	; 0x10
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <keybad_PressKey+0x17c>
     d2e:	50 cf       	rjmp	.-352    	; 0xbd0 <keybad_PressKey+0x1c>
			_delay_ms(10);
		}

		MDIO_vidSetPinValue(k_port,row,HIGH);
	}
	return pressed_key;
     d30:	89 89       	ldd	r24, Y+17	; 0x11
}
     d32:	61 96       	adiw	r28, 0x11	; 17
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <HCLCD_vidInit>:




void HCLCD_vidInit(void)
{
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	c6 54       	subi	r28, 0x46	; 70
     d52:	d0 40       	sbci	r29, 0x00	; 0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
	MDIO_vidSetPortDirection(lcd_data_port,0xff);
     d5e:	83 e4       	ldi	r24, 0x43	; 67
     d60:	6f ef       	ldi	r22, 0xFF	; 255
     d62:	0e 94 8a 11 	call	0x2314	; 0x2314 <MDIO_vidSetPortDirection>
	MDIO_vidSetPinDirection(lcd_ctrl_port,lcd_en_pin,OUTPUT);
     d66:	84 e4       	ldi	r24, 0x44	; 68
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <MDIO_vidSetPinDirection>
	MDIO_vidSetPinDirection(lcd_ctrl_port,lcd_rs_pin,OUTPUT);
     d70:	84 e4       	ldi	r24, 0x44	; 68
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	41 e0       	ldi	r20, 0x01	; 1
     d76:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <MDIO_vidSetPinDirection>
     d7a:	fe 01       	movw	r30, r28
     d7c:	ed 5b       	subi	r30, 0xBD	; 189
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	a8 e4       	ldi	r26, 0x48	; 72
     d86:	b2 e4       	ldi	r27, 0x42	; 66
     d88:	80 83       	st	Z, r24
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	a2 83       	std	Z+2, r26	; 0x02
     d8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d90:	8e 01       	movw	r16, r28
     d92:	01 5c       	subi	r16, 0xC1	; 193
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	fe 01       	movw	r30, r28
     d98:	ed 5b       	subi	r30, 0xBD	; 189
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	4a ef       	ldi	r20, 0xFA	; 250
     daa:	54 e4       	ldi	r21, 0x44	; 68
     dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	f8 01       	movw	r30, r16
     db6:	80 83       	st	Z, r24
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	a2 83       	std	Z+2, r26	; 0x02
     dbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dbe:	fe 01       	movw	r30, r28
     dc0:	ff 96       	adiw	r30, 0x3f	; 63
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     dd6:	88 23       	and	r24, r24
     dd8:	2c f4       	brge	.+10     	; 0xde4 <HCLCD_vidInit+0xa0>
		__ticks = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9e af       	std	Y+62, r25	; 0x3e
     de0:	8d af       	std	Y+61, r24	; 0x3d
     de2:	46 c0       	rjmp	.+140    	; 0xe70 <HCLCD_vidInit+0x12c>
	else if (__tmp > 65535)
     de4:	fe 01       	movw	r30, r28
     de6:	ff 96       	adiw	r30, 0x3f	; 63
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	3f ef       	ldi	r19, 0xFF	; 255
     df4:	4f e7       	ldi	r20, 0x7F	; 127
     df6:	57 e4       	ldi	r21, 0x47	; 71
     df8:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	64 f5       	brge	.+88     	; 0xe58 <HCLCD_vidInit+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e00:	fe 01       	movw	r30, r28
     e02:	ed 5b       	subi	r30, 0xBD	; 189
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	60 81       	ld	r22, Z
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e2       	ldi	r20, 0x20	; 32
     e14:	51 e4       	ldi	r21, 0x41	; 65
     e16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	9e af       	std	Y+62, r25	; 0x3e
     e2c:	8d af       	std	Y+61, r24	; 0x3d
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <HCLCD_vidInit+0x10a>
     e30:	88 ec       	ldi	r24, 0xC8	; 200
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	9c af       	std	Y+60, r25	; 0x3c
     e36:	8b af       	std	Y+59, r24	; 0x3b
     e38:	8b ad       	ldd	r24, Y+59	; 0x3b
     e3a:	9c ad       	ldd	r25, Y+60	; 0x3c
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <HCLCD_vidInit+0xf8>
     e40:	9c af       	std	Y+60, r25	; 0x3c
     e42:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e44:	8d ad       	ldd	r24, Y+61	; 0x3d
     e46:	9e ad       	ldd	r25, Y+62	; 0x3e
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	9e af       	std	Y+62, r25	; 0x3e
     e4c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4e:	8d ad       	ldd	r24, Y+61	; 0x3d
     e50:	9e ad       	ldd	r25, Y+62	; 0x3e
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	69 f7       	brne	.-38     	; 0xe30 <HCLCD_vidInit+0xec>
     e56:	16 c0       	rjmp	.+44     	; 0xe84 <HCLCD_vidInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e58:	fe 01       	movw	r30, r28
     e5a:	ff 96       	adiw	r30, 0x3f	; 63
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	9e af       	std	Y+62, r25	; 0x3e
     e6e:	8d af       	std	Y+61, r24	; 0x3d
     e70:	8d ad       	ldd	r24, Y+61	; 0x3d
     e72:	9e ad       	ldd	r25, Y+62	; 0x3e
     e74:	9a af       	std	Y+58, r25	; 0x3a
     e76:	89 af       	std	Y+57, r24	; 0x39
     e78:	89 ad       	ldd	r24, Y+57	; 0x39
     e7a:	9a ad       	ldd	r25, Y+58	; 0x3a
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <HCLCD_vidInit+0x138>
     e80:	9a af       	std	Y+58, r25	; 0x3a
     e82:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	HCLCD_vidSendCommand(0b00111000);
     e84:	88 e3       	ldi	r24, 0x38	; 56
     e86:	0e 94 22 09 	call	0x1244	; 0x1244 <HCLCD_vidSendCommand>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a0 e8       	ldi	r26, 0x80	; 128
     e90:	bf e3       	ldi	r27, 0x3F	; 63
     e92:	8d ab       	std	Y+53, r24	; 0x35
     e94:	9e ab       	std	Y+54, r25	; 0x36
     e96:	af ab       	std	Y+55, r26	; 0x37
     e98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9a:	6d a9       	ldd	r22, Y+53	; 0x35
     e9c:	7e a9       	ldd	r23, Y+54	; 0x36
     e9e:	8f a9       	ldd	r24, Y+55	; 0x37
     ea0:	98 ad       	ldd	r25, Y+56	; 0x38
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	4a ef       	ldi	r20, 0xFA	; 250
     ea8:	54 e4       	ldi	r21, 0x44	; 68
     eaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	89 ab       	std	Y+49, r24	; 0x31
     eb4:	9a ab       	std	Y+50, r25	; 0x32
     eb6:	ab ab       	std	Y+51, r26	; 0x33
     eb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     eba:	69 a9       	ldd	r22, Y+49	; 0x31
     ebc:	7a a9       	ldd	r23, Y+50	; 0x32
     ebe:	8b a9       	ldd	r24, Y+51	; 0x33
     ec0:	9c a9       	ldd	r25, Y+52	; 0x34
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e8       	ldi	r20, 0x80	; 128
     ec8:	5f e3       	ldi	r21, 0x3F	; 63
     eca:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     ece:	88 23       	and	r24, r24
     ed0:	2c f4       	brge	.+10     	; 0xedc <HCLCD_vidInit+0x198>
		__ticks = 1;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	98 ab       	std	Y+48, r25	; 0x30
     ed8:	8f a7       	std	Y+47, r24	; 0x2f
     eda:	3f c0       	rjmp	.+126    	; 0xf5a <HCLCD_vidInit+0x216>
	else if (__tmp > 65535)
     edc:	69 a9       	ldd	r22, Y+49	; 0x31
     ede:	7a a9       	ldd	r23, Y+50	; 0x32
     ee0:	8b a9       	ldd	r24, Y+51	; 0x33
     ee2:	9c a9       	ldd	r25, Y+52	; 0x34
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	4f e7       	ldi	r20, 0x7F	; 127
     eea:	57 e4       	ldi	r21, 0x47	; 71
     eec:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     ef0:	18 16       	cp	r1, r24
     ef2:	4c f5       	brge	.+82     	; 0xf46 <HCLCD_vidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef4:	6d a9       	ldd	r22, Y+53	; 0x35
     ef6:	7e a9       	ldd	r23, Y+54	; 0x36
     ef8:	8f a9       	ldd	r24, Y+55	; 0x37
     efa:	98 ad       	ldd	r25, Y+56	; 0x38
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e2       	ldi	r20, 0x20	; 32
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	98 ab       	std	Y+48, r25	; 0x30
     f1a:	8f a7       	std	Y+47, r24	; 0x2f
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <HCLCD_vidInit+0x1f8>
     f1e:	88 ec       	ldi	r24, 0xC8	; 200
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9e a7       	std	Y+46, r25	; 0x2e
     f24:	8d a7       	std	Y+45, r24	; 0x2d
     f26:	8d a5       	ldd	r24, Y+45	; 0x2d
     f28:	9e a5       	ldd	r25, Y+46	; 0x2e
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <HCLCD_vidInit+0x1e6>
     f2e:	9e a7       	std	Y+46, r25	; 0x2e
     f30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f32:	8f a5       	ldd	r24, Y+47	; 0x2f
     f34:	98 a9       	ldd	r25, Y+48	; 0x30
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	98 ab       	std	Y+48, r25	; 0x30
     f3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f3e:	98 a9       	ldd	r25, Y+48	; 0x30
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	69 f7       	brne	.-38     	; 0xf1e <HCLCD_vidInit+0x1da>
     f44:	14 c0       	rjmp	.+40     	; 0xf6e <HCLCD_vidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f46:	69 a9       	ldd	r22, Y+49	; 0x31
     f48:	7a a9       	ldd	r23, Y+50	; 0x32
     f4a:	8b a9       	ldd	r24, Y+51	; 0x33
     f4c:	9c a9       	ldd	r25, Y+52	; 0x34
     f4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	98 ab       	std	Y+48, r25	; 0x30
     f58:	8f a7       	std	Y+47, r24	; 0x2f
     f5a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5c:	98 a9       	ldd	r25, Y+48	; 0x30
     f5e:	9c a7       	std	Y+44, r25	; 0x2c
     f60:	8b a7       	std	Y+43, r24	; 0x2b
     f62:	8b a5       	ldd	r24, Y+43	; 0x2b
     f64:	9c a5       	ldd	r25, Y+44	; 0x2c
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <HCLCD_vidInit+0x222>
     f6a:	9c a7       	std	Y+44, r25	; 0x2c
     f6c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HCLCD_vidSendCommand(0b00001100);
     f6e:	8c e0       	ldi	r24, 0x0C	; 12
     f70:	0e 94 22 09 	call	0x1244	; 0x1244 <HCLCD_vidSendCommand>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	a0 e8       	ldi	r26, 0x80	; 128
     f7a:	bf e3       	ldi	r27, 0x3F	; 63
     f7c:	8f a3       	std	Y+39, r24	; 0x27
     f7e:	98 a7       	std	Y+40, r25	; 0x28
     f80:	a9 a7       	std	Y+41, r26	; 0x29
     f82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f84:	6f a1       	ldd	r22, Y+39	; 0x27
     f86:	78 a5       	ldd	r23, Y+40	; 0x28
     f88:	89 a5       	ldd	r24, Y+41	; 0x29
     f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	4a ef       	ldi	r20, 0xFA	; 250
     f92:	54 e4       	ldi	r21, 0x44	; 68
     f94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	8b a3       	std	Y+35, r24	; 0x23
     f9e:	9c a3       	std	Y+36, r25	; 0x24
     fa0:	ad a3       	std	Y+37, r26	; 0x25
     fa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fa4:	6b a1       	ldd	r22, Y+35	; 0x23
     fa6:	7c a1       	ldd	r23, Y+36	; 0x24
     fa8:	8d a1       	ldd	r24, Y+37	; 0x25
     faa:	9e a1       	ldd	r25, Y+38	; 0x26
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e8       	ldi	r20, 0x80	; 128
     fb2:	5f e3       	ldi	r21, 0x3F	; 63
     fb4:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     fb8:	88 23       	and	r24, r24
     fba:	2c f4       	brge	.+10     	; 0xfc6 <HCLCD_vidInit+0x282>
		__ticks = 1;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9a a3       	std	Y+34, r25	; 0x22
     fc2:	89 a3       	std	Y+33, r24	; 0x21
     fc4:	3f c0       	rjmp	.+126    	; 0x1044 <HCLCD_vidInit+0x300>
	else if (__tmp > 65535)
     fc6:	6b a1       	ldd	r22, Y+35	; 0x23
     fc8:	7c a1       	ldd	r23, Y+36	; 0x24
     fca:	8d a1       	ldd	r24, Y+37	; 0x25
     fcc:	9e a1       	ldd	r25, Y+38	; 0x26
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	3f ef       	ldi	r19, 0xFF	; 255
     fd2:	4f e7       	ldi	r20, 0x7F	; 127
     fd4:	57 e4       	ldi	r21, 0x47	; 71
     fd6:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     fda:	18 16       	cp	r1, r24
     fdc:	4c f5       	brge	.+82     	; 0x1030 <HCLCD_vidInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fde:	6f a1       	ldd	r22, Y+39	; 0x27
     fe0:	78 a5       	ldd	r23, Y+40	; 0x28
     fe2:	89 a5       	ldd	r24, Y+41	; 0x29
     fe4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e2       	ldi	r20, 0x20	; 32
     fec:	51 e4       	ldi	r21, 0x41	; 65
     fee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	bc 01       	movw	r22, r24
     ff8:	cd 01       	movw	r24, r26
     ffa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	9a a3       	std	Y+34, r25	; 0x22
    1004:	89 a3       	std	Y+33, r24	; 0x21
    1006:	0f c0       	rjmp	.+30     	; 0x1026 <HCLCD_vidInit+0x2e2>
    1008:	88 ec       	ldi	r24, 0xC8	; 200
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	98 a3       	std	Y+32, r25	; 0x20
    100e:	8f 8f       	std	Y+31, r24	; 0x1f
    1010:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1012:	98 a1       	ldd	r25, Y+32	; 0x20
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <HCLCD_vidInit+0x2d0>
    1018:	98 a3       	std	Y+32, r25	; 0x20
    101a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    101c:	89 a1       	ldd	r24, Y+33	; 0x21
    101e:	9a a1       	ldd	r25, Y+34	; 0x22
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	9a a3       	std	Y+34, r25	; 0x22
    1024:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1026:	89 a1       	ldd	r24, Y+33	; 0x21
    1028:	9a a1       	ldd	r25, Y+34	; 0x22
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	69 f7       	brne	.-38     	; 0x1008 <HCLCD_vidInit+0x2c4>
    102e:	14 c0       	rjmp	.+40     	; 0x1058 <HCLCD_vidInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1030:	6b a1       	ldd	r22, Y+35	; 0x23
    1032:	7c a1       	ldd	r23, Y+36	; 0x24
    1034:	8d a1       	ldd	r24, Y+37	; 0x25
    1036:	9e a1       	ldd	r25, Y+38	; 0x26
    1038:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	9a a3       	std	Y+34, r25	; 0x22
    1042:	89 a3       	std	Y+33, r24	; 0x21
    1044:	89 a1       	ldd	r24, Y+33	; 0x21
    1046:	9a a1       	ldd	r25, Y+34	; 0x22
    1048:	9e 8f       	std	Y+30, r25	; 0x1e
    104a:	8d 8f       	std	Y+29, r24	; 0x1d
    104c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    104e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <HCLCD_vidInit+0x30c>
    1054:	9e 8f       	std	Y+30, r25	; 0x1e
    1056:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HCLCD_vidSendCommand(0b00000001);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 22 09 	call	0x1244	; 0x1244 <HCLCD_vidSendCommand>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a0 e4       	ldi	r26, 0x40	; 64
    1064:	b0 e4       	ldi	r27, 0x40	; 64
    1066:	89 8f       	std	Y+25, r24	; 0x19
    1068:	9a 8f       	std	Y+26, r25	; 0x1a
    106a:	ab 8f       	std	Y+27, r26	; 0x1b
    106c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106e:	69 8d       	ldd	r22, Y+25	; 0x19
    1070:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1072:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1074:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	4a ef       	ldi	r20, 0xFA	; 250
    107c:	54 e4       	ldi	r21, 0x44	; 68
    107e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	8d 8b       	std	Y+21, r24	; 0x15
    1088:	9e 8b       	std	Y+22, r25	; 0x16
    108a:	af 8b       	std	Y+23, r26	; 0x17
    108c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    108e:	6d 89       	ldd	r22, Y+21	; 0x15
    1090:	7e 89       	ldd	r23, Y+22	; 0x16
    1092:	8f 89       	ldd	r24, Y+23	; 0x17
    1094:	98 8d       	ldd	r25, Y+24	; 0x18
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    10a2:	88 23       	and	r24, r24
    10a4:	2c f4       	brge	.+10     	; 0x10b0 <HCLCD_vidInit+0x36c>
		__ticks = 1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9c 8b       	std	Y+20, r25	; 0x14
    10ac:	8b 8b       	std	Y+19, r24	; 0x13
    10ae:	3f c0       	rjmp	.+126    	; 0x112e <HCLCD_vidInit+0x3ea>
	else if (__tmp > 65535)
    10b0:	6d 89       	ldd	r22, Y+21	; 0x15
    10b2:	7e 89       	ldd	r23, Y+22	; 0x16
    10b4:	8f 89       	ldd	r24, Y+23	; 0x17
    10b6:	98 8d       	ldd	r25, Y+24	; 0x18
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	4f e7       	ldi	r20, 0x7F	; 127
    10be:	57 e4       	ldi	r21, 0x47	; 71
    10c0:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    10c4:	18 16       	cp	r1, r24
    10c6:	4c f5       	brge	.+82     	; 0x111a <HCLCD_vidInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c8:	69 8d       	ldd	r22, Y+25	; 0x19
    10ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	9c 8b       	std	Y+20, r25	; 0x14
    10ee:	8b 8b       	std	Y+19, r24	; 0x13
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <HCLCD_vidInit+0x3cc>
    10f2:	88 ec       	ldi	r24, 0xC8	; 200
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9a 8b       	std	Y+18, r25	; 0x12
    10f8:	89 8b       	std	Y+17, r24	; 0x11
    10fa:	89 89       	ldd	r24, Y+17	; 0x11
    10fc:	9a 89       	ldd	r25, Y+18	; 0x12
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <HCLCD_vidInit+0x3ba>
    1102:	9a 8b       	std	Y+18, r25	; 0x12
    1104:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1106:	8b 89       	ldd	r24, Y+19	; 0x13
    1108:	9c 89       	ldd	r25, Y+20	; 0x14
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	9c 8b       	std	Y+20, r25	; 0x14
    110e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1110:	8b 89       	ldd	r24, Y+19	; 0x13
    1112:	9c 89       	ldd	r25, Y+20	; 0x14
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	69 f7       	brne	.-38     	; 0x10f2 <HCLCD_vidInit+0x3ae>
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <HCLCD_vidInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111a:	6d 89       	ldd	r22, Y+21	; 0x15
    111c:	7e 89       	ldd	r23, Y+22	; 0x16
    111e:	8f 89       	ldd	r24, Y+23	; 0x17
    1120:	98 8d       	ldd	r25, Y+24	; 0x18
    1122:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	9c 8b       	std	Y+20, r25	; 0x14
    112c:	8b 8b       	std	Y+19, r24	; 0x13
    112e:	8b 89       	ldd	r24, Y+19	; 0x13
    1130:	9c 89       	ldd	r25, Y+20	; 0x14
    1132:	98 8b       	std	Y+16, r25	; 0x10
    1134:	8f 87       	std	Y+15, r24	; 0x0f
    1136:	8f 85       	ldd	r24, Y+15	; 0x0f
    1138:	98 89       	ldd	r25, Y+16	; 0x10
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <HCLCD_vidInit+0x3f6>
    113e:	98 8b       	std	Y+16, r25	; 0x10
    1140:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	HCLCD_vidSendCommand(0b00000110);
    1142:	86 e0       	ldi	r24, 0x06	; 6
    1144:	0e 94 22 09 	call	0x1244	; 0x1244 <HCLCD_vidSendCommand>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a0 e8       	ldi	r26, 0x80	; 128
    114e:	bf e3       	ldi	r27, 0x3F	; 63
    1150:	8b 87       	std	Y+11, r24	; 0x0b
    1152:	9c 87       	std	Y+12, r25	; 0x0c
    1154:	ad 87       	std	Y+13, r26	; 0x0d
    1156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1158:	6b 85       	ldd	r22, Y+11	; 0x0b
    115a:	7c 85       	ldd	r23, Y+12	; 0x0c
    115c:	8d 85       	ldd	r24, Y+13	; 0x0d
    115e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4a ef       	ldi	r20, 0xFA	; 250
    1166:	54 e4       	ldi	r21, 0x44	; 68
    1168:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	8f 83       	std	Y+7, r24	; 0x07
    1172:	98 87       	std	Y+8, r25	; 0x08
    1174:	a9 87       	std	Y+9, r26	; 0x09
    1176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    118c:	88 23       	and	r24, r24
    118e:	2c f4       	brge	.+10     	; 0x119a <HCLCD_vidInit+0x456>
		__ticks = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	3f c0       	rjmp	.+126    	; 0x1218 <HCLCD_vidInit+0x4d4>
	else if (__tmp > 65535)
    119a:	6f 81       	ldd	r22, Y+7	; 0x07
    119c:	78 85       	ldd	r23, Y+8	; 0x08
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	4c f5       	brge	.+82     	; 0x1204 <HCLCD_vidInit+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9e 83       	std	Y+6, r25	; 0x06
    11d8:	8d 83       	std	Y+5, r24	; 0x05
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <HCLCD_vidInit+0x4b6>
    11dc:	88 ec       	ldi	r24, 0xC8	; 200
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <HCLCD_vidInit+0x4a4>
    11ec:	9c 83       	std	Y+4, r25	; 0x04
    11ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
    11f2:	9e 81       	ldd	r25, Y+6	; 0x06
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	69 f7       	brne	.-38     	; 0x11dc <HCLCD_vidInit+0x498>
    1202:	14 c0       	rjmp	.+40     	; 0x122c <HCLCD_vidInit+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1204:	6f 81       	ldd	r22, Y+7	; 0x07
    1206:	78 85       	ldd	r23, Y+8	; 0x08
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9e 83       	std	Y+6, r25	; 0x06
    1216:	8d 83       	std	Y+5, r24	; 0x05
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <HCLCD_vidInit+0x4e0>
    1228:	9a 83       	std	Y+2, r25	; 0x02
    122a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);




}
    122c:	ca 5b       	subi	r28, 0xBA	; 186
    122e:	df 4f       	sbci	r29, 0xFF	; 255
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	08 95       	ret

00001244 <HCLCD_vidSendCommand>:
void HCLCD_vidSendCommand(u8 cpy_u8Command)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	6d 97       	sbiw	r28, 0x1d	; 29
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_rs_pin,LOW);
    125a:	84 e4       	ldi	r24, 0x44	; 68
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	0e 94 07 10 	call	0x200e	; 0x200e <MDIO_vidSetPinValue>
	MDIO_vidSetPortvalue(lcd_data_port,cpy_u8Command);
    1264:	83 e4       	ldi	r24, 0x43	; 67
    1266:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1268:	0e 94 cc 11 	call	0x2398	; 0x2398 <MDIO_vidSetPortvalue>
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,HIGH);
    126c:	84 e4       	ldi	r24, 0x44	; 68
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	0e 94 07 10 	call	0x200e	; 0x200e <MDIO_vidSetPinValue>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e8       	ldi	r26, 0x80	; 128
    127c:	bf e3       	ldi	r27, 0x3F	; 63
    127e:	89 8f       	std	Y+25, r24	; 0x19
    1280:	9a 8f       	std	Y+26, r25	; 0x1a
    1282:	ab 8f       	std	Y+27, r26	; 0x1b
    1284:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1286:	69 8d       	ldd	r22, Y+25	; 0x19
    1288:	7a 8d       	ldd	r23, Y+26	; 0x1a
    128a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    128c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4a ef       	ldi	r20, 0xFA	; 250
    1294:	54 e4       	ldi	r21, 0x44	; 68
    1296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	8d 8b       	std	Y+21, r24	; 0x15
    12a0:	9e 8b       	std	Y+22, r25	; 0x16
    12a2:	af 8b       	std	Y+23, r26	; 0x17
    12a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12a6:	6d 89       	ldd	r22, Y+21	; 0x15
    12a8:	7e 89       	ldd	r23, Y+22	; 0x16
    12aa:	8f 89       	ldd	r24, Y+23	; 0x17
    12ac:	98 8d       	ldd	r25, Y+24	; 0x18
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <HCLCD_vidSendCommand+0x84>
		__ticks = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9c 8b       	std	Y+20, r25	; 0x14
    12c4:	8b 8b       	std	Y+19, r24	; 0x13
    12c6:	3f c0       	rjmp	.+126    	; 0x1346 <HCLCD_vidSendCommand+0x102>
	else if (__tmp > 65535)
    12c8:	6d 89       	ldd	r22, Y+21	; 0x15
    12ca:	7e 89       	ldd	r23, Y+22	; 0x16
    12cc:	8f 89       	ldd	r24, Y+23	; 0x17
    12ce:	98 8d       	ldd	r25, Y+24	; 0x18
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3f ef       	ldi	r19, 0xFF	; 255
    12d4:	4f e7       	ldi	r20, 0x7F	; 127
    12d6:	57 e4       	ldi	r21, 0x47	; 71
    12d8:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	4c f5       	brge	.+82     	; 0x1332 <HCLCD_vidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e0:	69 8d       	ldd	r22, Y+25	; 0x19
    12e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9c 8b       	std	Y+20, r25	; 0x14
    1306:	8b 8b       	std	Y+19, r24	; 0x13
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <HCLCD_vidSendCommand+0xe4>
    130a:	88 ec       	ldi	r24, 0xC8	; 200
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9a 8b       	std	Y+18, r25	; 0x12
    1310:	89 8b       	std	Y+17, r24	; 0x11
    1312:	89 89       	ldd	r24, Y+17	; 0x11
    1314:	9a 89       	ldd	r25, Y+18	; 0x12
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <HCLCD_vidSendCommand+0xd2>
    131a:	9a 8b       	std	Y+18, r25	; 0x12
    131c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131e:	8b 89       	ldd	r24, Y+19	; 0x13
    1320:	9c 89       	ldd	r25, Y+20	; 0x14
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	9c 8b       	std	Y+20, r25	; 0x14
    1326:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1328:	8b 89       	ldd	r24, Y+19	; 0x13
    132a:	9c 89       	ldd	r25, Y+20	; 0x14
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	69 f7       	brne	.-38     	; 0x130a <HCLCD_vidSendCommand+0xc6>
    1330:	14 c0       	rjmp	.+40     	; 0x135a <HCLCD_vidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1332:	6d 89       	ldd	r22, Y+21	; 0x15
    1334:	7e 89       	ldd	r23, Y+22	; 0x16
    1336:	8f 89       	ldd	r24, Y+23	; 0x17
    1338:	98 8d       	ldd	r25, Y+24	; 0x18
    133a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9c 8b       	std	Y+20, r25	; 0x14
    1344:	8b 8b       	std	Y+19, r24	; 0x13
    1346:	8b 89       	ldd	r24, Y+19	; 0x13
    1348:	9c 89       	ldd	r25, Y+20	; 0x14
    134a:	98 8b       	std	Y+16, r25	; 0x10
    134c:	8f 87       	std	Y+15, r24	; 0x0f
    134e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1350:	98 89       	ldd	r25, Y+16	; 0x10
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <HCLCD_vidSendCommand+0x10e>
    1356:	98 8b       	std	Y+16, r25	; 0x10
    1358:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,LOW);
    135a:	84 e4       	ldi	r24, 0x44	; 68
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	0e 94 07 10 	call	0x200e	; 0x200e <MDIO_vidSetPinValue>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	a0 e8       	ldi	r26, 0x80	; 128
    136a:	bf e3       	ldi	r27, 0x3F	; 63
    136c:	8b 87       	std	Y+11, r24	; 0x0b
    136e:	9c 87       	std	Y+12, r25	; 0x0c
    1370:	ad 87       	std	Y+13, r26	; 0x0d
    1372:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1374:	6b 85       	ldd	r22, Y+11	; 0x0b
    1376:	7c 85       	ldd	r23, Y+12	; 0x0c
    1378:	8d 85       	ldd	r24, Y+13	; 0x0d
    137a:	9e 85       	ldd	r25, Y+14	; 0x0e
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	4a ef       	ldi	r20, 0xFA	; 250
    1382:	54 e4       	ldi	r21, 0x44	; 68
    1384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	8f 83       	std	Y+7, r24	; 0x07
    138e:	98 87       	std	Y+8, r25	; 0x08
    1390:	a9 87       	std	Y+9, r26	; 0x09
    1392:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1394:	6f 81       	ldd	r22, Y+7	; 0x07
    1396:	78 85       	ldd	r23, Y+8	; 0x08
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e8       	ldi	r20, 0x80	; 128
    13a2:	5f e3       	ldi	r21, 0x3F	; 63
    13a4:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    13a8:	88 23       	and	r24, r24
    13aa:	2c f4       	brge	.+10     	; 0x13b6 <HCLCD_vidSendCommand+0x172>
		__ticks = 1;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	3f c0       	rjmp	.+126    	; 0x1434 <HCLCD_vidSendCommand+0x1f0>
	else if (__tmp > 65535)
    13b6:	6f 81       	ldd	r22, Y+7	; 0x07
    13b8:	78 85       	ldd	r23, Y+8	; 0x08
    13ba:	89 85       	ldd	r24, Y+9	; 0x09
    13bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	3f ef       	ldi	r19, 0xFF	; 255
    13c2:	4f e7       	ldi	r20, 0x7F	; 127
    13c4:	57 e4       	ldi	r21, 0x47	; 71
    13c6:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    13ca:	18 16       	cp	r1, r24
    13cc:	4c f5       	brge	.+82     	; 0x1420 <HCLCD_vidSendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e2       	ldi	r20, 0x20	; 32
    13dc:	51 e4       	ldi	r21, 0x41	; 65
    13de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	bc 01       	movw	r22, r24
    13e8:	cd 01       	movw	r24, r26
    13ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	0f c0       	rjmp	.+30     	; 0x1416 <HCLCD_vidSendCommand+0x1d2>
    13f8:	88 ec       	ldi	r24, 0xC8	; 200
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9c 83       	std	Y+4, r25	; 0x04
    13fe:	8b 83       	std	Y+3, r24	; 0x03
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <HCLCD_vidSendCommand+0x1c0>
    1408:	9c 83       	std	Y+4, r25	; 0x04
    140a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	69 f7       	brne	.-38     	; 0x13f8 <HCLCD_vidSendCommand+0x1b4>
    141e:	14 c0       	rjmp	.+40     	; 0x1448 <HCLCD_vidSendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1420:	6f 81       	ldd	r22, Y+7	; 0x07
    1422:	78 85       	ldd	r23, Y+8	; 0x08
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <HCLCD_vidSendCommand+0x1fc>
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1448:	6d 96       	adiw	r28, 0x1d	; 29
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <HCLCD_vidSendData>:
void HCLCD_vidSendData(u8 cpy_u8Data)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	6d 97       	sbiw	r28, 0x1d	; 29
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_rs_pin,HIGH);
    1470:	84 e4       	ldi	r24, 0x44	; 68
    1472:	61 e0       	ldi	r22, 0x01	; 1
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	0e 94 07 10 	call	0x200e	; 0x200e <MDIO_vidSetPinValue>
	MDIO_vidSetPortvalue(lcd_data_port,cpy_u8Data);
    147a:	83 e4       	ldi	r24, 0x43	; 67
    147c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    147e:	0e 94 cc 11 	call	0x2398	; 0x2398 <MDIO_vidSetPortvalue>
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,HIGH);
    1482:	84 e4       	ldi	r24, 0x44	; 68
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	41 e0       	ldi	r20, 0x01	; 1
    1488:	0e 94 07 10 	call	0x200e	; 0x200e <MDIO_vidSetPinValue>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	a0 e8       	ldi	r26, 0x80	; 128
    1492:	bf e3       	ldi	r27, 0x3F	; 63
    1494:	89 8f       	std	Y+25, r24	; 0x19
    1496:	9a 8f       	std	Y+26, r25	; 0x1a
    1498:	ab 8f       	std	Y+27, r26	; 0x1b
    149a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149c:	69 8d       	ldd	r22, Y+25	; 0x19
    149e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a ef       	ldi	r20, 0xFA	; 250
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	8d 8b       	std	Y+21, r24	; 0x15
    14b6:	9e 8b       	std	Y+22, r25	; 0x16
    14b8:	af 8b       	std	Y+23, r26	; 0x17
    14ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14bc:	6d 89       	ldd	r22, Y+21	; 0x15
    14be:	7e 89       	ldd	r23, Y+22	; 0x16
    14c0:	8f 89       	ldd	r24, Y+23	; 0x17
    14c2:	98 8d       	ldd	r25, Y+24	; 0x18
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e8       	ldi	r20, 0x80	; 128
    14ca:	5f e3       	ldi	r21, 0x3F	; 63
    14cc:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	2c f4       	brge	.+10     	; 0x14de <HCLCD_vidSendData+0x84>
		__ticks = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9c 8b       	std	Y+20, r25	; 0x14
    14da:	8b 8b       	std	Y+19, r24	; 0x13
    14dc:	3f c0       	rjmp	.+126    	; 0x155c <HCLCD_vidSendData+0x102>
	else if (__tmp > 65535)
    14de:	6d 89       	ldd	r22, Y+21	; 0x15
    14e0:	7e 89       	ldd	r23, Y+22	; 0x16
    14e2:	8f 89       	ldd	r24, Y+23	; 0x17
    14e4:	98 8d       	ldd	r25, Y+24	; 0x18
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	3f ef       	ldi	r19, 0xFF	; 255
    14ea:	4f e7       	ldi	r20, 0x7F	; 127
    14ec:	57 e4       	ldi	r21, 0x47	; 71
    14ee:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    14f2:	18 16       	cp	r1, r24
    14f4:	4c f5       	brge	.+82     	; 0x1548 <HCLCD_vidSendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f6:	69 8d       	ldd	r22, Y+25	; 0x19
    14f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e2       	ldi	r20, 0x20	; 32
    1504:	51 e4       	ldi	r21, 0x41	; 65
    1506:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9c 8b       	std	Y+20, r25	; 0x14
    151c:	8b 8b       	std	Y+19, r24	; 0x13
    151e:	0f c0       	rjmp	.+30     	; 0x153e <HCLCD_vidSendData+0xe4>
    1520:	88 ec       	ldi	r24, 0xC8	; 200
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9a 8b       	std	Y+18, r25	; 0x12
    1526:	89 8b       	std	Y+17, r24	; 0x11
    1528:	89 89       	ldd	r24, Y+17	; 0x11
    152a:	9a 89       	ldd	r25, Y+18	; 0x12
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <HCLCD_vidSendData+0xd2>
    1530:	9a 8b       	std	Y+18, r25	; 0x12
    1532:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1534:	8b 89       	ldd	r24, Y+19	; 0x13
    1536:	9c 89       	ldd	r25, Y+20	; 0x14
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	9c 8b       	std	Y+20, r25	; 0x14
    153c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153e:	8b 89       	ldd	r24, Y+19	; 0x13
    1540:	9c 89       	ldd	r25, Y+20	; 0x14
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	69 f7       	brne	.-38     	; 0x1520 <HCLCD_vidSendData+0xc6>
    1546:	14 c0       	rjmp	.+40     	; 0x1570 <HCLCD_vidSendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1548:	6d 89       	ldd	r22, Y+21	; 0x15
    154a:	7e 89       	ldd	r23, Y+22	; 0x16
    154c:	8f 89       	ldd	r24, Y+23	; 0x17
    154e:	98 8d       	ldd	r25, Y+24	; 0x18
    1550:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9c 8b       	std	Y+20, r25	; 0x14
    155a:	8b 8b       	std	Y+19, r24	; 0x13
    155c:	8b 89       	ldd	r24, Y+19	; 0x13
    155e:	9c 89       	ldd	r25, Y+20	; 0x14
    1560:	98 8b       	std	Y+16, r25	; 0x10
    1562:	8f 87       	std	Y+15, r24	; 0x0f
    1564:	8f 85       	ldd	r24, Y+15	; 0x0f
    1566:	98 89       	ldd	r25, Y+16	; 0x10
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <HCLCD_vidSendData+0x10e>
    156c:	98 8b       	std	Y+16, r25	; 0x10
    156e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,LOW);
    1570:	84 e4       	ldi	r24, 0x44	; 68
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	0e 94 07 10 	call	0x200e	; 0x200e <MDIO_vidSetPinValue>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e8       	ldi	r26, 0x80	; 128
    1580:	bf e3       	ldi	r27, 0x3F	; 63
    1582:	8b 87       	std	Y+11, r24	; 0x0b
    1584:	9c 87       	std	Y+12, r25	; 0x0c
    1586:	ad 87       	std	Y+13, r26	; 0x0d
    1588:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	6b 85       	ldd	r22, Y+11	; 0x0b
    158c:	7c 85       	ldd	r23, Y+12	; 0x0c
    158e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1590:	9e 85       	ldd	r25, Y+14	; 0x0e
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a ef       	ldi	r20, 0xFA	; 250
    1598:	54 e4       	ldi	r21, 0x44	; 68
    159a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8f 83       	std	Y+7, r24	; 0x07
    15a4:	98 87       	std	Y+8, r25	; 0x08
    15a6:	a9 87       	std	Y+9, r26	; 0x09
    15a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <HCLCD_vidSendData+0x172>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <HCLCD_vidSendData+0x1f0>
	else if (__tmp > 65535)
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <HCLCD_vidSendData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	0f c0       	rjmp	.+30     	; 0x162c <HCLCD_vidSendData+0x1d2>
    160e:	88 ec       	ldi	r24, 0xC8	; 200
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <HCLCD_vidSendData+0x1c0>
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <HCLCD_vidSendData+0x1b4>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <HCLCD_vidSendData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <HCLCD_vidSendData+0x1fc>
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    165e:	6d 96       	adiw	r28, 0x1d	; 29
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <HCLCD_vidSendString>:
void HCLCD_vidSendString(const u8* add_pu8String)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <HCLCD_vidSendString+0x6>
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	9b 83       	std	Y+3, r25	; 0x03
    167e:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i=0;add_pu8String[i];i++)
    1680:	19 82       	std	Y+1, r1	; 0x01
    1682:	0e c0       	rjmp	.+28     	; 0x16a0 <HCLCD_vidSendString+0x30>
    {
    	HCLCD_vidSendData(add_pu8String[i]);
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	9b 81       	ldd	r25, Y+3	; 0x03
    168e:	fc 01       	movw	r30, r24
    1690:	e2 0f       	add	r30, r18
    1692:	f3 1f       	adc	r31, r19
    1694:	80 81       	ld	r24, Z
    1696:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,LOW);
	_delay_ms(1);
}
void HCLCD_vidSendString(const u8* add_pu8String)
{
    for(u8 i=0;add_pu8String[i];i++)
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	8f 5f       	subi	r24, 0xFF	; 255
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	9b 81       	ldd	r25, Y+3	; 0x03
    16aa:	fc 01       	movw	r30, r24
    16ac:	e2 0f       	add	r30, r18
    16ae:	f3 1f       	adc	r31, r19
    16b0:	80 81       	ld	r24, Z
    16b2:	88 23       	and	r24, r24
    16b4:	39 f7       	brne	.-50     	; 0x1684 <HCLCD_vidSendString+0x14>
    {
    	HCLCD_vidSendData(add_pu8String[i]);
    }
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <HCLCD_vidSendNumber>:
void HCLCD_vidSendNumber(s32 cpy_u32Number) //123
{      u32 cpy_u32power=1;
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	2c 97       	sbiw	r28, 0x0c	; 12
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	69 87       	std	Y+9, r22	; 0x09
    16d8:	7a 87       	std	Y+10, r23	; 0x0a
    16da:	8b 87       	std	Y+11, r24	; 0x0b
    16dc:	9c 87       	std	Y+12, r25	; 0x0c
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	af 83       	std	Y+7, r26	; 0x07
    16ec:	b8 87       	std	Y+8, r27	; 0x08
       s32 cpy_u32num=cpy_u32Number;
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    16f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	ab 83       	std	Y+3, r26	; 0x03
    16fc:	bc 83       	std	Y+4, r27	; 0x04
      if(cpy_u32Number==0)
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	ab 85       	ldd	r26, Y+11	; 0x0b
    1704:	bc 85       	ldd	r27, Y+12	; 0x0c
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	a1 05       	cpc	r26, r1
    170a:	b1 05       	cpc	r27, r1
    170c:	21 f4       	brne	.+8      	; 0x1716 <HCLCD_vidSendNumber+0x54>
      {
    	  HCLCD_vidSendData('0');
    170e:	80 e3       	ldi	r24, 0x30	; 48
    1710:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>
    1714:	9b c0       	rjmp	.+310    	; 0x184c <HCLCD_vidSendNumber+0x18a>
    	  return;
      }
      if(cpy_u32Number<0)
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	ab 85       	ldd	r26, Y+11	; 0x0b
    171c:	bc 85       	ldd	r27, Y+12	; 0x0c
    171e:	bb 23       	and	r27, r27
    1720:	bc f5       	brge	.+110    	; 0x1790 <HCLCD_vidSendNumber+0xce>
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	ab 85       	ldd	r26, Y+11	; 0x0b
    1728:	bc 85       	ldd	r27, Y+12	; 0x0c
    172a:	b0 95       	com	r27
    172c:	a0 95       	com	r26
    172e:	90 95       	com	r25
    1730:	81 95       	neg	r24
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	af 4f       	sbci	r26, 0xFF	; 255
    1736:	bf 4f       	sbci	r27, 0xFF	; 255
    1738:	89 87       	std	Y+9, r24	; 0x09
    173a:	9a 87       	std	Y+10, r25	; 0x0a
    173c:	ab 87       	std	Y+11, r26	; 0x0b
    173e:	bc 87       	std	Y+12, r27	; 0x0c
    	  HCLCD_vidSendData('-');
    1740:	8d e2       	ldi	r24, 0x2D	; 45
    1742:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>
    1746:	24 c0       	rjmp	.+72     	; 0x1790 <HCLCD_vidSendNumber+0xce>
      }
      while(cpy_u32num)
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	9a 81       	ldd	r25, Y+2	; 0x02
    174c:	ab 81       	ldd	r26, Y+3	; 0x03
    174e:	bc 81       	ldd	r27, Y+4	; 0x04
    1750:	2a e0       	ldi	r18, 0x0A	; 10
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 32 18 	call	0x3064	; 0x3064 <__divmodsi4>
    1760:	da 01       	movw	r26, r20
    1762:	c9 01       	movw	r24, r18
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	ab 83       	std	Y+3, r26	; 0x03
    176a:	bc 83       	std	Y+4, r27	; 0x04
    	  cpy_u32power=cpy_u32power*10;      //10000
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	9e 81       	ldd	r25, Y+6	; 0x06
    1770:	af 81       	ldd	r26, Y+7	; 0x07
    1772:	b8 85       	ldd	r27, Y+8	; 0x08
    1774:	2a e0       	ldi	r18, 0x0A	; 10
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__mulsi3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	af 83       	std	Y+7, r26	; 0x07
    178e:	b8 87       	std	Y+8, r27	; 0x08
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    	  HCLCD_vidSendData('-');
      }
      while(cpy_u32num)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	ab 81       	ldd	r26, Y+3	; 0x03
    1796:	bc 81       	ldd	r27, Y+4	; 0x04
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	a1 05       	cpc	r26, r1
    179c:	b1 05       	cpc	r27, r1
    179e:	a1 f6       	brne	.-88     	; 0x1748 <HCLCD_vidSendNumber+0x86>
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	af 81       	ldd	r26, Y+7	; 0x07
    17a6:	b8 85       	ldd	r27, Y+8	; 0x08
    17a8:	2a e0       	ldi	r18, 0x0A	; 10
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    17b8:	da 01       	movw	r26, r20
    17ba:	c9 01       	movw	r24, r18
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	af 83       	std	Y+7, r26	; 0x07
    17c2:	b8 87       	std	Y+8, r27	; 0x08
    17c4:	3a c0       	rjmp	.+116    	; 0x183a <HCLCD_vidSendNumber+0x178>
      while(cpy_u32power>0)
      {
    	  cpy_u32num=cpy_u32Number/cpy_u32power;  //01234/1000=0
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    17cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    17ce:	2d 81       	ldd	r18, Y+5	; 0x05
    17d0:	3e 81       	ldd	r19, Y+6	; 0x06
    17d2:	4f 81       	ldd	r20, Y+7	; 0x07
    17d4:	58 85       	ldd	r21, Y+8	; 0x08
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    17de:	da 01       	movw	r26, r20
    17e0:	c9 01       	movw	r24, r18
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	ab 83       	std	Y+3, r26	; 0x03
    17e8:	bc 83       	std	Y+4, r27	; 0x04
    	  cpy_u32Number%=cpy_u32power;
    17ea:	89 85       	ldd	r24, Y+9	; 0x09
    17ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    17f0:	bc 85       	ldd	r27, Y+12	; 0x0c
    17f2:	2d 81       	ldd	r18, Y+5	; 0x05
    17f4:	3e 81       	ldd	r19, Y+6	; 0x06
    17f6:	4f 81       	ldd	r20, Y+7	; 0x07
    17f8:	58 85       	ldd	r21, Y+8	; 0x08
    17fa:	bc 01       	movw	r22, r24
    17fc:	cd 01       	movw	r24, r26
    17fe:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	89 87       	std	Y+9, r24	; 0x09
    1808:	9a 87       	std	Y+10, r25	; 0x0a
    180a:	ab 87       	std	Y+11, r26	; 0x0b
    180c:	bc 87       	std	Y+12, r27	; 0x0c
    	  cpy_u32power/=10;
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	af 81       	ldd	r26, Y+7	; 0x07
    1814:	b8 85       	ldd	r27, Y+8	; 0x08
    1816:	2a e0       	ldi	r18, 0x0A	; 10
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    1826:	da 01       	movw	r26, r20
    1828:	c9 01       	movw	r24, r18
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	af 83       	std	Y+7, r26	; 0x07
    1830:	b8 87       	std	Y+8, r27	; 0x08

    	  HCLCD_vidSendData(cpy_u32num+'0');
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	80 5d       	subi	r24, 0xD0	; 208
    1836:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
      while(cpy_u32power>0)
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	af 81       	ldd	r26, Y+7	; 0x07
    1840:	b8 85       	ldd	r27, Y+8	; 0x08
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	a1 05       	cpc	r26, r1
    1846:	b1 05       	cpc	r27, r1
    1848:	09 f0       	breq	.+2      	; 0x184c <HCLCD_vidSendNumber+0x18a>
    184a:	bd cf       	rjmp	.-134    	; 0x17c6 <HCLCD_vidSendNumber+0x104>
      }




}
    184c:	2c 96       	adiw	r28, 0x0c	; 12
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <HCLCD_vidSendFloat>:

void HCLCD_vidSendFloat(f64 cpy_f64Float) //3.14 *1000 3140
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	64 97       	sbiw	r28, 0x14	; 20
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	69 8b       	std	Y+17, r22	; 0x11
    1874:	7a 8b       	std	Y+18, r23	; 0x12
    1876:	8b 8b       	std	Y+19, r24	; 0x13
    1878:	9c 8b       	std	Y+20, r25	; 0x14
	  u32 cpy_u32power=1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e0       	ldi	r26, 0x00	; 0
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	8d 87       	std	Y+13, r24	; 0x0d
    1884:	9e 87       	std	Y+14, r25	; 0x0e
    1886:	af 87       	std	Y+15, r26	; 0x0f
    1888:	b8 8b       	std	Y+16, r27	; 0x10
	       s32 cpy_u32num=cpy_f64Float;
    188a:	69 89       	ldd	r22, Y+17	; 0x11
    188c:	7a 89       	ldd	r23, Y+18	; 0x12
    188e:	8b 89       	ldd	r24, Y+19	; 0x13
    1890:	9c 89       	ldd	r25, Y+20	; 0x14
    1892:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	89 87       	std	Y+9, r24	; 0x09
    189c:	9a 87       	std	Y+10, r25	; 0x0a
    189e:	ab 87       	std	Y+11, r26	; 0x0b
    18a0:	bc 87       	std	Y+12, r27	; 0x0c
	       s32 i=0;
    18a2:	1d 82       	std	Y+5, r1	; 0x05
    18a4:	1e 82       	std	Y+6, r1	; 0x06
    18a6:	1f 82       	std	Y+7, r1	; 0x07
    18a8:	18 86       	std	Y+8, r1	; 0x08

	      if(cpy_f64Float==0)
    18aa:	69 89       	ldd	r22, Y+17	; 0x11
    18ac:	7a 89       	ldd	r23, Y+18	; 0x12
    18ae:	8b 89       	ldd	r24, Y+19	; 0x13
    18b0:	9c 89       	ldd	r25, Y+20	; 0x14
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	0e 94 11 03 	call	0x622	; 0x622 <__eqsf2>
    18be:	88 23       	and	r24, r24
    18c0:	21 f4       	brne	.+8      	; 0x18ca <HCLCD_vidSendFloat+0x6c>
	      {
	    	  HCLCD_vidSendData('0');
    18c2:	80 e3       	ldi	r24, 0x30	; 48
    18c4:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>
    18c8:	d2 c0       	rjmp	.+420    	; 0x1a6e <HCLCD_vidSendFloat+0x210>
	    	  return;
	      }
	      if(cpy_f64Float<0)
    18ca:	69 89       	ldd	r22, Y+17	; 0x11
    18cc:	7a 89       	ldd	r23, Y+18	; 0x12
    18ce:	8b 89       	ldd	r24, Y+19	; 0x13
    18d0:	9c 89       	ldd	r25, Y+20	; 0x14
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	e4 f5       	brge	.+120    	; 0x195a <HCLCD_vidSendFloat+0xfc>
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
    18e2:	89 89       	ldd	r24, Y+17	; 0x11
    18e4:	9a 89       	ldd	r25, Y+18	; 0x12
    18e6:	ab 89       	ldd	r26, Y+19	; 0x13
    18e8:	bc 89       	ldd	r27, Y+20	; 0x14
    18ea:	b0 58       	subi	r27, 0x80	; 128
    18ec:	89 8b       	std	Y+17, r24	; 0x11
    18ee:	9a 8b       	std	Y+18, r25	; 0x12
    18f0:	ab 8b       	std	Y+19, r26	; 0x13
    18f2:	bc 8b       	std	Y+20, r27	; 0x14
	    	  HCLCD_vidSendData('-');
    18f4:	8d e2       	ldi	r24, 0x2D	; 45
    18f6:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>
    18fa:	2f c0       	rjmp	.+94     	; 0x195a <HCLCD_vidSendFloat+0xfc>
	      }
	      while(cpy_u32num)//1234
	      {

	    	  cpy_u32num=cpy_u32num/10;
    18fc:	89 85       	ldd	r24, Y+9	; 0x09
    18fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1900:	ab 85       	ldd	r26, Y+11	; 0x0b
    1902:	bc 85       	ldd	r27, Y+12	; 0x0c
    1904:	2a e0       	ldi	r18, 0x0A	; 10
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 32 18 	call	0x3064	; 0x3064 <__divmodsi4>
    1914:	da 01       	movw	r26, r20
    1916:	c9 01       	movw	r24, r18
    1918:	89 87       	std	Y+9, r24	; 0x09
    191a:	9a 87       	std	Y+10, r25	; 0x0a
    191c:	ab 87       	std	Y+11, r26	; 0x0b
    191e:	bc 87       	std	Y+12, r27	; 0x0c
	    	   i++;//4
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	af 81       	ldd	r26, Y+7	; 0x07
    1926:	b8 85       	ldd	r27, Y+8	; 0x08
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	a1 1d       	adc	r26, r1
    192c:	b1 1d       	adc	r27, r1
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	af 83       	std	Y+7, r26	; 0x07
    1934:	b8 87       	std	Y+8, r27	; 0x08
	    	  cpy_u32power=cpy_u32power*10;      //10000
    1936:	8d 85       	ldd	r24, Y+13	; 0x0d
    1938:	9e 85       	ldd	r25, Y+14	; 0x0e
    193a:	af 85       	ldd	r26, Y+15	; 0x0f
    193c:	b8 89       	ldd	r27, Y+16	; 0x10
    193e:	2a e0       	ldi	r18, 0x0A	; 10
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__mulsi3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	8d 87       	std	Y+13, r24	; 0x0d
    1954:	9e 87       	std	Y+14, r25	; 0x0e
    1956:	af 87       	std	Y+15, r26	; 0x0f
    1958:	b8 8b       	std	Y+16, r27	; 0x10
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
	    	  HCLCD_vidSendData('-');
	      }
	      while(cpy_u32num)//1234
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1960:	bc 85       	ldd	r27, Y+12	; 0x0c
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	a1 05       	cpc	r26, r1
    1966:	b1 05       	cpc	r27, r1
    1968:	49 f6       	brne	.-110    	; 0x18fc <HCLCD_vidSendFloat+0x9e>

	    	  cpy_u32num=cpy_u32num/10;
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
    196a:	69 89       	ldd	r22, Y+17	; 0x11
    196c:	7a 89       	ldd	r23, Y+18	; 0x12
    196e:	8b 89       	ldd	r24, Y+19	; 0x13
    1970:	9c 89       	ldd	r25, Y+20	; 0x14
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e4       	ldi	r19, 0x40	; 64
    1976:	4c e1       	ldi	r20, 0x1C	; 28
    1978:	56 e4       	ldi	r21, 0x46	; 70
    197a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	ab 83       	std	Y+3, r26	; 0x03
    1994:	bc 83       	std	Y+4, r27	; 0x04
	      cpy_u32power=cpy_u32power*1000;
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	af 85       	ldd	r26, Y+15	; 0x0f
    199c:	b8 89       	ldd	r27, Y+16	; 0x10
    199e:	28 ee       	ldi	r18, 0xE8	; 232
    19a0:	33 e0       	ldi	r19, 0x03	; 3
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__mulsi3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	8d 87       	std	Y+13, r24	; 0x0d
    19b4:	9e 87       	std	Y+14, r25	; 0x0e
    19b6:	af 87       	std	Y+15, r26	; 0x0f
    19b8:	b8 8b       	std	Y+16, r27	; 0x10
    19ba:	50 c0       	rjmp	.+160    	; 0x1a5c <HCLCD_vidSendFloat+0x1fe>
	      while(cpy_u32power>0)
	      {
	    	  cpy_u32num=int_num/cpy_u32power;  //01234/1000=0
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	ab 81       	ldd	r26, Y+3	; 0x03
    19c2:	bc 81       	ldd	r27, Y+4	; 0x04
    19c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    19c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    19c8:	4f 85       	ldd	r20, Y+15	; 0x0f
    19ca:	58 89       	ldd	r21, Y+16	; 0x10
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    19d4:	da 01       	movw	r26, r20
    19d6:	c9 01       	movw	r24, r18
    19d8:	89 87       	std	Y+9, r24	; 0x09
    19da:	9a 87       	std	Y+10, r25	; 0x0a
    19dc:	ab 87       	std	Y+11, r26	; 0x0b
    19de:	bc 87       	std	Y+12, r27	; 0x0c
	    	  int_num%=cpy_u32power;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	ab 81       	ldd	r26, Y+3	; 0x03
    19e6:	bc 81       	ldd	r27, Y+4	; 0x04
    19e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    19ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    19ec:	4f 85       	ldd	r20, Y+15	; 0x0f
    19ee:	58 89       	ldd	r21, Y+16	; 0x10
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	ab 83       	std	Y+3, r26	; 0x03
    1a02:	bc 83       	std	Y+4, r27	; 0x04
	    	  cpy_u32power/=10;
    1a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a08:	af 85       	ldd	r26, Y+15	; 0x0f
    1a0a:	b8 89       	ldd	r27, Y+16	; 0x10
    1a0c:	2a e0       	ldi	r18, 0x0A	; 10
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    1a1c:	da 01       	movw	r26, r20
    1a1e:	c9 01       	movw	r24, r18
    1a20:	8d 87       	std	Y+13, r24	; 0x0d
    1a22:	9e 87       	std	Y+14, r25	; 0x0e
    1a24:	af 87       	std	Y+15, r26	; 0x0f
    1a26:	b8 8b       	std	Y+16, r27	; 0x10
               if(i==0)
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	af 81       	ldd	r26, Y+7	; 0x07
    1a2e:	b8 85       	ldd	r27, Y+8	; 0x08
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	a1 05       	cpc	r26, r1
    1a34:	b1 05       	cpc	r27, r1
    1a36:	19 f4       	brne	.+6      	; 0x1a3e <HCLCD_vidSendFloat+0x1e0>
               {
            	   HCLCD_vidSendData('.');
    1a38:	8e e2       	ldi	r24, 0x2E	; 46
    1a3a:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>

               }
               i--;
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	af 81       	ldd	r26, Y+7	; 0x07
    1a44:	b8 85       	ldd	r27, Y+8	; 0x08
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	a1 09       	sbc	r26, r1
    1a4a:	b1 09       	sbc	r27, r1
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	af 83       	std	Y+7, r26	; 0x07
    1a52:	b8 87       	std	Y+8, r27	; 0x08
	    	  HCLCD_vidSendData(cpy_u32num+'0');
    1a54:	89 85       	ldd	r24, Y+9	; 0x09
    1a56:	80 5d       	subi	r24, 0xD0	; 208
    1a58:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
	      cpy_u32power=cpy_u32power*1000;
	      while(cpy_u32power>0)
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	af 85       	ldd	r26, Y+15	; 0x0f
    1a62:	b8 89       	ldd	r27, Y+16	; 0x10
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	a1 05       	cpc	r26, r1
    1a68:	b1 05       	cpc	r27, r1
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <HCLCD_vidSendFloat+0x210>
    1a6c:	a7 cf       	rjmp	.-178    	; 0x19bc <HCLCD_vidSendFloat+0x15e>
		cpy_f64Float-=(s32)cpy_f64Float;//0.4    0

	}
*/

}
    1a6e:	64 96       	adiw	r28, 0x14	; 20
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <HCLCD_vidGoTo>:
void HCLCD_vidGoTo(u8 cpy_u8X, u8 cpy_u8Y)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <HCLCD_vidGoTo+0x6>
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	6a 83       	std	Y+2, r22	; 0x02
    if(cpy_u8X==0)
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	88 23       	and	r24, r24
    1a92:	21 f4       	brne	.+8      	; 0x1a9c <HCLCD_vidGoTo+0x1c>
    {
    	HCLCD_vidSendCommand(0x80|cpy_u8Y);
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	80 68       	ori	r24, 0x80	; 128
    1a98:	0e 94 22 09 	call	0x1244	; 0x1244 <HCLCD_vidSendCommand>
    }
    if(cpy_u8X==1)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	21 f4       	brne	.+8      	; 0x1aaa <HCLCD_vidGoTo+0x2a>
    {
    	HCLCD_vidSendCommand(0x80+0x40+cpy_u8Y);
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	80 54       	subi	r24, 0x40	; 64
    1aa6:	0e 94 22 09 	call	0x1244	; 0x1244 <HCLCD_vidSendCommand>
    }
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <HCLCD_vidClear>:
void HCLCD_vidClear(void)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	2e 97       	sbiw	r28, 0x0e	; 14
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
	HCLCD_vidSendCommand(0b00000001);
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	0e 94 22 09 	call	0x1244	; 0x1244 <HCLCD_vidSendCommand>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e8       	ldi	r26, 0x80	; 128
    1ad4:	bf e3       	ldi	r27, 0x3F	; 63
    1ad6:	8b 87       	std	Y+11, r24	; 0x0b
    1ad8:	9c 87       	std	Y+12, r25	; 0x0c
    1ada:	ad 87       	std	Y+13, r26	; 0x0d
    1adc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a ef       	ldi	r20, 0xFA	; 250
    1aec:	54 e4       	ldi	r21, 0x44	; 68
    1aee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8f 83       	std	Y+7, r24	; 0x07
    1af8:	98 87       	std	Y+8, r25	; 0x08
    1afa:	a9 87       	std	Y+9, r26	; 0x09
    1afc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1afe:	6f 81       	ldd	r22, Y+7	; 0x07
    1b00:	78 85       	ldd	r23, Y+8	; 0x08
    1b02:	89 85       	ldd	r24, Y+9	; 0x09
    1b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <HCLCD_vidClear+0x6c>
		__ticks = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
    1b1e:	3f c0       	rjmp	.+126    	; 0x1b9e <HCLCD_vidClear+0xea>
	else if (__tmp > 65535)
    1b20:	6f 81       	ldd	r22, Y+7	; 0x07
    1b22:	78 85       	ldd	r23, Y+8	; 0x08
    1b24:	89 85       	ldd	r24, Y+9	; 0x09
    1b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	3f ef       	ldi	r19, 0xFF	; 255
    1b2c:	4f e7       	ldi	r20, 0x7F	; 127
    1b2e:	57 e4       	ldi	r21, 0x47	; 71
    1b30:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	4c f5       	brge	.+82     	; 0x1b8a <HCLCD_vidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e2       	ldi	r20, 0x20	; 32
    1b46:	51 e4       	ldi	r21, 0x41	; 65
    1b48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	0f c0       	rjmp	.+30     	; 0x1b80 <HCLCD_vidClear+0xcc>
    1b62:	88 ec       	ldi	r24, 0xC8	; 200
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9c 83       	std	Y+4, r25	; 0x04
    1b68:	8b 83       	std	Y+3, r24	; 0x03
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <HCLCD_vidClear+0xba>
    1b72:	9c 83       	std	Y+4, r25	; 0x04
    1b74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	69 f7       	brne	.-38     	; 0x1b62 <HCLCD_vidClear+0xae>
    1b88:	14 c0       	rjmp	.+40     	; 0x1bb2 <HCLCD_vidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8c:	78 85       	ldd	r23, Y+8	; 0x08
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <HCLCD_vidClear+0xf6>
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1bb2:	2e 96       	adiw	r28, 0x0e	; 14
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <HCLCD_vidSendSpecialChar>:
void HCLCD_vidSendSpecialChar(const u8* arr_u8Char, u8 cpy_u8BlockNumber)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <HCLCD_vidSendSpecialChar+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <HCLCD_vidSendSpecialChar+0x8>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9b 83       	std	Y+3, r25	; 0x03
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	6c 83       	std	Y+4, r22	; 0x04
	HCLCD_vidSendCommand(0x40+(cpy_u8BlockNumber*8));  //CGRAM
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	08 96       	adiw	r24, 0x08	; 8
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0e 94 22 09 	call	0x1244	; 0x1244 <HCLCD_vidSendCommand>
			for(u8 i=0;i<8;i++)
    1bee:	19 82       	std	Y+1, r1	; 0x01
    1bf0:	0e c0       	rjmp	.+28     	; 0x1c0e <HCLCD_vidSendSpecialChar+0x4a>
			{
				HCLCD_vidSendData(arr_u8Char[i]);
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	e2 0f       	add	r30, r18
    1c00:	f3 1f       	adc	r31, r19
    1c02:	80 81       	ld	r24, Z
    1c04:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>
	_delay_ms(1);
}
void HCLCD_vidSendSpecialChar(const u8* arr_u8Char, u8 cpy_u8BlockNumber)
{
	HCLCD_vidSendCommand(0x40+(cpy_u8BlockNumber*8));  //CGRAM
			for(u8 i=0;i<8;i++)
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	88 30       	cpi	r24, 0x08	; 8
    1c12:	78 f3       	brcs	.-34     	; 0x1bf2 <HCLCD_vidSendSpecialChar+0x2e>
			{
				HCLCD_vidSendData(arr_u8Char[i]);

			}
	         HCLCD_vidSendCommand(0x80);  //DDRAM
    1c14:	80 e8       	ldi	r24, 0x80	; 128
    1c16:	0e 94 22 09 	call	0x1244	; 0x1244 <HCLCD_vidSendCommand>
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <MDIO_vidSetPinDirection>:
#include "LCD.h"
#include "dioo_int.h"
#include <util/delay.h>

void MDIO_vidSetPinDirection(u8 cpy_u8PortNumber,u8 cpy_u8PinNumber, u8 cpy_u8PortDirection)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	2d 97       	sbiw	r28, 0x0d	; 13
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	6a 83       	std	Y+2, r22	; 0x02
    1c40:	4b 83       	std	Y+3, r20	; 0x03
	//DDRs
	switch (cpy_u8PortDirection)
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	3d 87       	std	Y+13, r19	; 0x0d
    1c4a:	2c 87       	std	Y+12, r18	; 0x0c
    1c4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	91 05       	cpc	r25, r1
    1c54:	61 f0       	breq	.+24     	; 0x1c6e <MDIO_vidSetPinDirection+0x46>
    1c56:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c58:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c5a:	2a 30       	cpi	r18, 0x0A	; 10
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <MDIO_vidSetPinDirection+0x3a>
    1c60:	eb c0       	rjmp	.+470    	; 0x1e38 <MDIO_vidSetPinDirection+0x210>
    1c62:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c64:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <MDIO_vidSetPinDirection+0x44>
    1c6a:	71 c0       	rjmp	.+226    	; 0x1d4e <MDIO_vidSetPinDirection+0x126>
    1c6c:	c7 c1       	rjmp	.+910    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
	{
	case OUTPUT: //set DDRs
	{
		switch(cpy_u8PortNumber)
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3b 87       	std	Y+11, r19	; 0x0b
    1c76:	2a 87       	std	Y+10, r18	; 0x0a
    1c78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c7c:	82 34       	cpi	r24, 0x42	; 66
    1c7e:	91 05       	cpc	r25, r1
    1c80:	51 f1       	breq	.+84     	; 0x1cd6 <MDIO_vidSetPinDirection+0xae>
    1c82:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c84:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c86:	23 34       	cpi	r18, 0x43	; 67
    1c88:	31 05       	cpc	r19, r1
    1c8a:	34 f4       	brge	.+12     	; 0x1c98 <MDIO_vidSetPinDirection+0x70>
    1c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c90:	81 34       	cpi	r24, 0x41	; 65
    1c92:	91 05       	cpc	r25, r1
    1c94:	61 f0       	breq	.+24     	; 0x1cae <MDIO_vidSetPinDirection+0x86>
    1c96:	b2 c1       	rjmp	.+868    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
    1c98:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c9a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c9c:	23 34       	cpi	r18, 0x43	; 67
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	71 f1       	breq	.+92     	; 0x1cfe <MDIO_vidSetPinDirection+0xd6>
    1ca2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ca4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ca6:	84 34       	cpi	r24, 0x44	; 68
    1ca8:	91 05       	cpc	r25, r1
    1caa:	e9 f1       	breq	.+122    	; 0x1d26 <MDIO_vidSetPinDirection+0xfe>
    1cac:	a7 c1       	rjmp	.+846    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		{
		case PORT_A:	SET_BIT(DDRA, cpy_u8PinNumber); break;
    1cae:	aa e3       	ldi	r26, 0x3A	; 58
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	ea e3       	ldi	r30, 0x3A	; 58
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	48 2f       	mov	r20, r24
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	02 2e       	mov	r0, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <MDIO_vidSetPinDirection+0xa4>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	0a 94       	dec	r0
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <MDIO_vidSetPinDirection+0xa0>
    1cd0:	84 2b       	or	r24, r20
    1cd2:	8c 93       	st	X, r24
    1cd4:	93 c1       	rjmp	.+806    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		case PORT_B:    SET_BIT(DDRB, cpy_u8PinNumber); break;
    1cd6:	a7 e3       	ldi	r26, 0x37	; 55
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e7 e3       	ldi	r30, 0x37	; 55
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	02 2e       	mov	r0, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <MDIO_vidSetPinDirection+0xcc>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <MDIO_vidSetPinDirection+0xc8>
    1cf8:	84 2b       	or	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	7f c1       	rjmp	.+766    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		case PORT_C:	SET_BIT(DDRC, cpy_u8PinNumber); break;
    1cfe:	a4 e3       	ldi	r26, 0x34	; 52
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e4 e3       	ldi	r30, 0x34	; 52
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <MDIO_vidSetPinDirection+0xf4>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <MDIO_vidSetPinDirection+0xf0>
    1d20:	84 2b       	or	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	6b c1       	rjmp	.+726    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		case PORT_D:    SET_BIT(DDRD, cpy_u8PinNumber); break;
    1d26:	a1 e3       	ldi	r26, 0x31	; 49
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e1 e3       	ldi	r30, 0x31	; 49
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <MDIO_vidSetPinDirection+0x11c>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <MDIO_vidSetPinDirection+0x118>
    1d48:	84 2b       	or	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	57 c1       	rjmp	.+686    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		}
		break;
	}
	case INPUT:
	{
		switch(cpy_u8PortNumber)
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	39 87       	std	Y+9, r19	; 0x09
    1d56:	28 87       	std	Y+8, r18	; 0x08
    1d58:	88 85       	ldd	r24, Y+8	; 0x08
    1d5a:	99 85       	ldd	r25, Y+9	; 0x09
    1d5c:	82 34       	cpi	r24, 0x42	; 66
    1d5e:	91 05       	cpc	r25, r1
    1d60:	61 f1       	breq	.+88     	; 0x1dba <MDIO_vidSetPinDirection+0x192>
    1d62:	28 85       	ldd	r18, Y+8	; 0x08
    1d64:	39 85       	ldd	r19, Y+9	; 0x09
    1d66:	23 34       	cpi	r18, 0x43	; 67
    1d68:	31 05       	cpc	r19, r1
    1d6a:	34 f4       	brge	.+12     	; 0x1d78 <MDIO_vidSetPinDirection+0x150>
    1d6c:	88 85       	ldd	r24, Y+8	; 0x08
    1d6e:	99 85       	ldd	r25, Y+9	; 0x09
    1d70:	81 34       	cpi	r24, 0x41	; 65
    1d72:	91 05       	cpc	r25, r1
    1d74:	69 f0       	breq	.+26     	; 0x1d90 <MDIO_vidSetPinDirection+0x168>
    1d76:	42 c1       	rjmp	.+644    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
    1d78:	28 85       	ldd	r18, Y+8	; 0x08
    1d7a:	39 85       	ldd	r19, Y+9	; 0x09
    1d7c:	23 34       	cpi	r18, 0x43	; 67
    1d7e:	31 05       	cpc	r19, r1
    1d80:	89 f1       	breq	.+98     	; 0x1de4 <MDIO_vidSetPinDirection+0x1bc>
    1d82:	88 85       	ldd	r24, Y+8	; 0x08
    1d84:	99 85       	ldd	r25, Y+9	; 0x09
    1d86:	84 34       	cpi	r24, 0x44	; 68
    1d88:	91 05       	cpc	r25, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <MDIO_vidSetPinDirection+0x166>
    1d8c:	40 c0       	rjmp	.+128    	; 0x1e0e <MDIO_vidSetPinDirection+0x1e6>
    1d8e:	36 c1       	rjmp	.+620    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		{
		case PORT_A:	CLEAR_BIT(DDRA,cpy_u8PinNumber); break;
    1d90:	aa e3       	ldi	r26, 0x3A	; 58
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ea e3       	ldi	r30, 0x3A	; 58
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <MDIO_vidSetPinDirection+0x186>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <MDIO_vidSetPinDirection+0x182>
    1db2:	80 95       	com	r24
    1db4:	84 23       	and	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	21 c1       	rjmp	.+578    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		case PORT_B:    CLEAR_BIT(DDRB,cpy_u8PinNumber); break;
    1dba:	a7 e3       	ldi	r26, 0x37	; 55
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e7 e3       	ldi	r30, 0x37	; 55
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <MDIO_vidSetPinDirection+0x1b0>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <MDIO_vidSetPinDirection+0x1ac>
    1ddc:	80 95       	com	r24
    1dde:	84 23       	and	r24, r20
    1de0:	8c 93       	st	X, r24
    1de2:	0c c1       	rjmp	.+536    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		case PORT_C:    CLEAR_BIT(DDRC,cpy_u8PinNumber); break;
    1de4:	a4 e3       	ldi	r26, 0x34	; 52
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e4 e3       	ldi	r30, 0x34	; 52
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <MDIO_vidSetPinDirection+0x1da>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <MDIO_vidSetPinDirection+0x1d6>
    1e06:	80 95       	com	r24
    1e08:	84 23       	and	r24, r20
    1e0a:	8c 93       	st	X, r24
    1e0c:	f7 c0       	rjmp	.+494    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		case PORT_D:	CLEAR_BIT(DDRD,cpy_u8PinNumber); break;
    1e0e:	a1 e3       	ldi	r26, 0x31	; 49
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e1 e3       	ldi	r30, 0x31	; 49
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	48 2f       	mov	r20, r24
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	02 2e       	mov	r0, r18
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <MDIO_vidSetPinDirection+0x204>
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	0a 94       	dec	r0
    1e2e:	e2 f7       	brpl	.-8      	; 0x1e28 <MDIO_vidSetPinDirection+0x200>
    1e30:	80 95       	com	r24
    1e32:	84 23       	and	r24, r20
    1e34:	8c 93       	st	X, r24
    1e36:	e2 c0       	rjmp	.+452    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		}
		break;
	}
	case INPULL :
	{
		switch (cpy_u8PortNumber)
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3f 83       	std	Y+7, r19	; 0x07
    1e40:	2e 83       	std	Y+6, r18	; 0x06
    1e42:	8e 81       	ldd	r24, Y+6	; 0x06
    1e44:	9f 81       	ldd	r25, Y+7	; 0x07
    1e46:	82 34       	cpi	r24, 0x42	; 66
    1e48:	91 05       	cpc	r25, r1
    1e4a:	61 f1       	breq	.+88     	; 0x1ea4 <MDIO_vidSetPinDirection+0x27c>
    1e4c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e4e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e50:	23 34       	cpi	r18, 0x43	; 67
    1e52:	31 05       	cpc	r19, r1
    1e54:	34 f4       	brge	.+12     	; 0x1e62 <MDIO_vidSetPinDirection+0x23a>
    1e56:	8e 81       	ldd	r24, Y+6	; 0x06
    1e58:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5a:	81 34       	cpi	r24, 0x41	; 65
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	69 f0       	breq	.+26     	; 0x1e7a <MDIO_vidSetPinDirection+0x252>
    1e60:	5e c0       	rjmp	.+188    	; 0x1f1e <MDIO_vidSetPinDirection+0x2f6>
    1e62:	2e 81       	ldd	r18, Y+6	; 0x06
    1e64:	3f 81       	ldd	r19, Y+7	; 0x07
    1e66:	23 34       	cpi	r18, 0x43	; 67
    1e68:	31 05       	cpc	r19, r1
    1e6a:	89 f1       	breq	.+98     	; 0x1ece <MDIO_vidSetPinDirection+0x2a6>
    1e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e70:	84 34       	cpi	r24, 0x44	; 68
    1e72:	91 05       	cpc	r25, r1
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <MDIO_vidSetPinDirection+0x250>
    1e76:	40 c0       	rjmp	.+128    	; 0x1ef8 <MDIO_vidSetPinDirection+0x2d0>
    1e78:	52 c0       	rjmp	.+164    	; 0x1f1e <MDIO_vidSetPinDirection+0x2f6>
		{
		case PORT_A: CLEAR_BIT(DDRA ,cpy_u8PortNumber ); break;
    1e7a:	aa e3       	ldi	r26, 0x3A	; 58
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	ea e3       	ldi	r30, 0x3A	; 58
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	48 2f       	mov	r20, r24
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	02 2e       	mov	r0, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <MDIO_vidSetPinDirection+0x270>
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	0a 94       	dec	r0
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <MDIO_vidSetPinDirection+0x26c>
    1e9c:	80 95       	com	r24
    1e9e:	84 23       	and	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	3d c0       	rjmp	.+122    	; 0x1f1e <MDIO_vidSetPinDirection+0x2f6>
		case PORT_B: CLEAR_BIT(DDRB ,cpy_u8PortNumber ); break;
    1ea4:	a7 e3       	ldi	r26, 0x37	; 55
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e7 e3       	ldi	r30, 0x37	; 55
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <MDIO_vidSetPinDirection+0x29a>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <MDIO_vidSetPinDirection+0x296>
    1ec6:	80 95       	com	r24
    1ec8:	84 23       	and	r24, r20
    1eca:	8c 93       	st	X, r24
    1ecc:	28 c0       	rjmp	.+80     	; 0x1f1e <MDIO_vidSetPinDirection+0x2f6>
		case PORT_C: CLEAR_BIT(DDRC ,cpy_u8PortNumber ); break;
    1ece:	a4 e3       	ldi	r26, 0x34	; 52
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e4 e3       	ldi	r30, 0x34	; 52
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	48 2f       	mov	r20, r24
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <MDIO_vidSetPinDirection+0x2c4>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <MDIO_vidSetPinDirection+0x2c0>
    1ef0:	80 95       	com	r24
    1ef2:	84 23       	and	r24, r20
    1ef4:	8c 93       	st	X, r24
    1ef6:	13 c0       	rjmp	.+38     	; 0x1f1e <MDIO_vidSetPinDirection+0x2f6>
		case PORT_D: CLEAR_BIT(DDRD ,cpy_u8PortNumber ); break;
    1ef8:	a1 e3       	ldi	r26, 0x31	; 49
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e1 e3       	ldi	r30, 0x31	; 49
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	48 2f       	mov	r20, r24
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <MDIO_vidSetPinDirection+0x2ec>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	2a 95       	dec	r18
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <MDIO_vidSetPinDirection+0x2e8>
    1f18:	80 95       	com	r24
    1f1a:	84 23       	and	r24, r20
    1f1c:	8c 93       	st	X, r24
		default :

			break;
		}
		switch (cpy_u8PortNumber)
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3d 83       	std	Y+5, r19	; 0x05
    1f26:	2c 83       	std	Y+4, r18	; 0x04
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	82 34       	cpi	r24, 0x42	; 66
    1f2e:	91 05       	cpc	r25, r1
    1f30:	51 f1       	breq	.+84     	; 0x1f86 <MDIO_vidSetPinDirection+0x35e>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	23 34       	cpi	r18, 0x43	; 67
    1f38:	31 05       	cpc	r19, r1
    1f3a:	34 f4       	brge	.+12     	; 0x1f48 <MDIO_vidSetPinDirection+0x320>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	81 34       	cpi	r24, 0x41	; 65
    1f42:	91 05       	cpc	r25, r1
    1f44:	61 f0       	breq	.+24     	; 0x1f5e <MDIO_vidSetPinDirection+0x336>
    1f46:	5a c0       	rjmp	.+180    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
    1f48:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4c:	23 34       	cpi	r18, 0x43	; 67
    1f4e:	31 05       	cpc	r19, r1
    1f50:	71 f1       	breq	.+92     	; 0x1fae <MDIO_vidSetPinDirection+0x386>
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	84 34       	cpi	r24, 0x44	; 68
    1f58:	91 05       	cpc	r25, r1
    1f5a:	e9 f1       	breq	.+122    	; 0x1fd6 <MDIO_vidSetPinDirection+0x3ae>
    1f5c:	4f c0       	rjmp	.+158    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		{
		case PORT_A: SET_BIT(PORTA ,cpy_u8PortNumber ); break;
    1f5e:	ab e3       	ldi	r26, 0x3B	; 59
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	eb e3       	ldi	r30, 0x3B	; 59
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <MDIO_vidSetPinDirection+0x354>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <MDIO_vidSetPinDirection+0x350>
    1f80:	84 2b       	or	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	3b c0       	rjmp	.+118    	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		case PORT_B: SET_BIT(PORTB ,cpy_u8PortNumber ); break;
    1f86:	a8 e3       	ldi	r26, 0x38	; 56
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e8 e3       	ldi	r30, 0x38	; 56
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <MDIO_vidSetPinDirection+0x37c>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <MDIO_vidSetPinDirection+0x378>
    1fa8:	84 2b       	or	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	27 c0       	rjmp	.+78     	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		case PORT_C: SET_BIT(PORTC ,cpy_u8PortNumber ); break;
    1fae:	a5 e3       	ldi	r26, 0x35	; 53
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e5 e3       	ldi	r30, 0x35	; 53
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	48 2f       	mov	r20, r24
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <MDIO_vidSetPinDirection+0x3a4>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <MDIO_vidSetPinDirection+0x3a0>
    1fd0:	84 2b       	or	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	13 c0       	rjmp	.+38     	; 0x1ffc <MDIO_vidSetPinDirection+0x3d4>
		case PORT_D: SET_BIT(PORTD ,cpy_u8PortNumber ); break;
    1fd6:	a2 e3       	ldi	r26, 0x32	; 50
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e2 e3       	ldi	r30, 0x32	; 50
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <MDIO_vidSetPinDirection+0x3cc>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <MDIO_vidSetPinDirection+0x3c8>
    1ff8:	84 2b       	or	r24, r20
    1ffa:	8c 93       	st	X, r24
		}
	}
	break;
	default:	{/* wrong direction*/ break;}
	}
}
    1ffc:	2d 96       	adiw	r28, 0x0d	; 13
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <MDIO_vidSetPinValue>:

void MDIO_vidSetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber, u8 cpy_u8PinValue)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	29 97       	sbiw	r28, 0x09	; 9
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	6a 83       	std	Y+2, r22	; 0x02
    2026:	4b 83       	std	Y+3, r20	; 0x03
	// PORTs registers
	switch (cpy_u8PinValue)
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	39 87       	std	Y+9, r19	; 0x09
    2030:	28 87       	std	Y+8, r18	; 0x08
    2032:	88 85       	ldd	r24, Y+8	; 0x08
    2034:	99 85       	ldd	r25, Y+9	; 0x09
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	09 f4       	brne	.+2      	; 0x203c <MDIO_vidSetPinValue+0x2e>
    203a:	76 c0       	rjmp	.+236    	; 0x2128 <MDIO_vidSetPinValue+0x11a>
    203c:	28 85       	ldd	r18, Y+8	; 0x08
    203e:	39 85       	ldd	r19, Y+9	; 0x09
    2040:	21 30       	cpi	r18, 0x01	; 1
    2042:	31 05       	cpc	r19, r1
    2044:	09 f0       	breq	.+2      	; 0x2048 <MDIO_vidSetPinValue+0x3a>
    2046:	e4 c0       	rjmp	.+456    	; 0x2210 <MDIO_vidSetPinValue+0x202>
	{
	case HIGH: //set
	{
		switch (cpy_u8PortNumber)
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	3f 83       	std	Y+7, r19	; 0x07
    2050:	2e 83       	std	Y+6, r18	; 0x06
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	9f 81       	ldd	r25, Y+7	; 0x07
    2056:	82 34       	cpi	r24, 0x42	; 66
    2058:	91 05       	cpc	r25, r1
    205a:	51 f1       	breq	.+84     	; 0x20b0 <MDIO_vidSetPinValue+0xa2>
    205c:	2e 81       	ldd	r18, Y+6	; 0x06
    205e:	3f 81       	ldd	r19, Y+7	; 0x07
    2060:	23 34       	cpi	r18, 0x43	; 67
    2062:	31 05       	cpc	r19, r1
    2064:	34 f4       	brge	.+12     	; 0x2072 <MDIO_vidSetPinValue+0x64>
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	81 34       	cpi	r24, 0x41	; 65
    206c:	91 05       	cpc	r25, r1
    206e:	61 f0       	breq	.+24     	; 0x2088 <MDIO_vidSetPinValue+0x7a>
    2070:	cf c0       	rjmp	.+414    	; 0x2210 <MDIO_vidSetPinValue+0x202>
    2072:	2e 81       	ldd	r18, Y+6	; 0x06
    2074:	3f 81       	ldd	r19, Y+7	; 0x07
    2076:	23 34       	cpi	r18, 0x43	; 67
    2078:	31 05       	cpc	r19, r1
    207a:	71 f1       	breq	.+92     	; 0x20d8 <MDIO_vidSetPinValue+0xca>
    207c:	8e 81       	ldd	r24, Y+6	; 0x06
    207e:	9f 81       	ldd	r25, Y+7	; 0x07
    2080:	84 34       	cpi	r24, 0x44	; 68
    2082:	91 05       	cpc	r25, r1
    2084:	e9 f1       	breq	.+122    	; 0x2100 <MDIO_vidSetPinValue+0xf2>
    2086:	c4 c0       	rjmp	.+392    	; 0x2210 <MDIO_vidSetPinValue+0x202>
		{
		case PORT_A:	{SET_BIT(PORTA, cpy_u8PinNumber); break;}
    2088:	ab e3       	ldi	r26, 0x3B	; 59
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	eb e3       	ldi	r30, 0x3B	; 59
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	48 2f       	mov	r20, r24
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	02 2e       	mov	r0, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <MDIO_vidSetPinValue+0x98>
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	0a 94       	dec	r0
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <MDIO_vidSetPinValue+0x94>
    20aa:	84 2b       	or	r24, r20
    20ac:	8c 93       	st	X, r24
    20ae:	b0 c0       	rjmp	.+352    	; 0x2210 <MDIO_vidSetPinValue+0x202>

		case PORT_B:	{SET_BIT(PORTB, cpy_u8PinNumber); break;}
    20b0:	a8 e3       	ldi	r26, 0x38	; 56
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e8 e3       	ldi	r30, 0x38	; 56
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	48 2f       	mov	r20, r24
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	02 2e       	mov	r0, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <MDIO_vidSetPinValue+0xc0>
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	0a 94       	dec	r0
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <MDIO_vidSetPinValue+0xbc>
    20d2:	84 2b       	or	r24, r20
    20d4:	8c 93       	st	X, r24
    20d6:	9c c0       	rjmp	.+312    	; 0x2210 <MDIO_vidSetPinValue+0x202>

		case PORT_C:	{SET_BIT(PORTC, cpy_u8PinNumber); break;}
    20d8:	a5 e3       	ldi	r26, 0x35	; 53
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e5 e3       	ldi	r30, 0x35	; 53
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	48 2f       	mov	r20, r24
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	02 2e       	mov	r0, r18
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <MDIO_vidSetPinValue+0xe8>
    20f2:	88 0f       	add	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	0a 94       	dec	r0
    20f8:	e2 f7       	brpl	.-8      	; 0x20f2 <MDIO_vidSetPinValue+0xe4>
    20fa:	84 2b       	or	r24, r20
    20fc:	8c 93       	st	X, r24
    20fe:	88 c0       	rjmp	.+272    	; 0x2210 <MDIO_vidSetPinValue+0x202>

		case PORT_D: 	{SET_BIT(PORTD, cpy_u8PinNumber); break;}
    2100:	a2 e3       	ldi	r26, 0x32	; 50
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e2 e3       	ldi	r30, 0x32	; 50
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	48 2f       	mov	r20, r24
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	02 2e       	mov	r0, r18
    2118:	02 c0       	rjmp	.+4      	; 0x211e <MDIO_vidSetPinValue+0x110>
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	0a 94       	dec	r0
    2120:	e2 f7       	brpl	.-8      	; 0x211a <MDIO_vidSetPinValue+0x10c>
    2122:	84 2b       	or	r24, r20
    2124:	8c 93       	st	X, r24
    2126:	74 c0       	rjmp	.+232    	; 0x2210 <MDIO_vidSetPinValue+0x202>
		}
		break;
	}
	case LOW:
	{
		switch(cpy_u8PortNumber)
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	3d 83       	std	Y+5, r19	; 0x05
    2130:	2c 83       	std	Y+4, r18	; 0x04
    2132:	8c 81       	ldd	r24, Y+4	; 0x04
    2134:	9d 81       	ldd	r25, Y+5	; 0x05
    2136:	82 34       	cpi	r24, 0x42	; 66
    2138:	91 05       	cpc	r25, r1
    213a:	61 f1       	breq	.+88     	; 0x2194 <MDIO_vidSetPinValue+0x186>
    213c:	2c 81       	ldd	r18, Y+4	; 0x04
    213e:	3d 81       	ldd	r19, Y+5	; 0x05
    2140:	23 34       	cpi	r18, 0x43	; 67
    2142:	31 05       	cpc	r19, r1
    2144:	34 f4       	brge	.+12     	; 0x2152 <MDIO_vidSetPinValue+0x144>
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	9d 81       	ldd	r25, Y+5	; 0x05
    214a:	81 34       	cpi	r24, 0x41	; 65
    214c:	91 05       	cpc	r25, r1
    214e:	69 f0       	breq	.+26     	; 0x216a <MDIO_vidSetPinValue+0x15c>
    2150:	5f c0       	rjmp	.+190    	; 0x2210 <MDIO_vidSetPinValue+0x202>
    2152:	2c 81       	ldd	r18, Y+4	; 0x04
    2154:	3d 81       	ldd	r19, Y+5	; 0x05
    2156:	23 34       	cpi	r18, 0x43	; 67
    2158:	31 05       	cpc	r19, r1
    215a:	89 f1       	breq	.+98     	; 0x21be <MDIO_vidSetPinValue+0x1b0>
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	9d 81       	ldd	r25, Y+5	; 0x05
    2160:	84 34       	cpi	r24, 0x44	; 68
    2162:	91 05       	cpc	r25, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <MDIO_vidSetPinValue+0x15a>
    2166:	40 c0       	rjmp	.+128    	; 0x21e8 <MDIO_vidSetPinValue+0x1da>
    2168:	53 c0       	rjmp	.+166    	; 0x2210 <MDIO_vidSetPinValue+0x202>
		{
		case PORT_A:	  {CLEAR_BIT(PORTA,cpy_u8PinNumber); break;}
    216a:	ab e3       	ldi	r26, 0x3B	; 59
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	eb e3       	ldi	r30, 0x3B	; 59
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	48 2f       	mov	r20, r24
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	02 2e       	mov	r0, r18
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <MDIO_vidSetPinValue+0x17a>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	0a 94       	dec	r0
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <MDIO_vidSetPinValue+0x176>
    218c:	80 95       	com	r24
    218e:	84 23       	and	r24, r20
    2190:	8c 93       	st	X, r24
    2192:	3e c0       	rjmp	.+124    	; 0x2210 <MDIO_vidSetPinValue+0x202>

		case PORT_B:	  {CLEAR_BIT(PORTB,cpy_u8PinNumber); break;}
    2194:	a8 e3       	ldi	r26, 0x38	; 56
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e8 e3       	ldi	r30, 0x38	; 56
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	48 2f       	mov	r20, r24
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	02 2e       	mov	r0, r18
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <MDIO_vidSetPinValue+0x1a4>
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	0a 94       	dec	r0
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <MDIO_vidSetPinValue+0x1a0>
    21b6:	80 95       	com	r24
    21b8:	84 23       	and	r24, r20
    21ba:	8c 93       	st	X, r24
    21bc:	29 c0       	rjmp	.+82     	; 0x2210 <MDIO_vidSetPinValue+0x202>

		case PORT_C:	  {CLEAR_BIT(PORTC,cpy_u8PinNumber); break;}
    21be:	a5 e3       	ldi	r26, 0x35	; 53
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 e3       	ldi	r30, 0x35	; 53
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	48 2f       	mov	r20, r24
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	02 2e       	mov	r0, r18
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <MDIO_vidSetPinValue+0x1ce>
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	0a 94       	dec	r0
    21de:	e2 f7       	brpl	.-8      	; 0x21d8 <MDIO_vidSetPinValue+0x1ca>
    21e0:	80 95       	com	r24
    21e2:	84 23       	and	r24, r20
    21e4:	8c 93       	st	X, r24
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <MDIO_vidSetPinValue+0x202>

		case PORT_D:    {CLEAR_BIT(PORTD,cpy_u8PinNumber); break;}
    21e8:	a2 e3       	ldi	r26, 0x32	; 50
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e2 e3       	ldi	r30, 0x32	; 50
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	48 2f       	mov	r20, r24
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	02 2e       	mov	r0, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <MDIO_vidSetPinValue+0x1f8>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 94       	dec	r0
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <MDIO_vidSetPinValue+0x1f4>
    220a:	80 95       	com	r24
    220c:	84 23       	and	r24, r20
    220e:	8c 93       	st	X, r24
		}
		break;
	}
	default:	{/*wrong value*/ break;}
	}
}
    2210:	29 96       	adiw	r28, 0x09	; 9
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <MDIO_vidGetPinValue>:

u8	 MDIO_vidGetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	00 d0       	rcall	.+0      	; 0x2228 <MDIO_vidGetPinValue+0x6>
    2228:	00 d0       	rcall	.+0      	; 0x222a <MDIO_vidGetPinValue+0x8>
    222a:	0f 92       	push	r0
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	8a 83       	std	Y+2, r24	; 0x02
    2232:	6b 83       	std	Y+3, r22	; 0x03
	u8 get;
	// PINs registers
	switch(cpy_u8PortNumber) // get bit
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	3d 83       	std	Y+5, r19	; 0x05
    223c:	2c 83       	std	Y+4, r18	; 0x04
    223e:	4c 81       	ldd	r20, Y+4	; 0x04
    2240:	5d 81       	ldd	r21, Y+5	; 0x05
    2242:	42 34       	cpi	r20, 0x42	; 66
    2244:	51 05       	cpc	r21, r1
    2246:	41 f1       	breq	.+80     	; 0x2298 <MDIO_vidGetPinValue+0x76>
    2248:	8c 81       	ldd	r24, Y+4	; 0x04
    224a:	9d 81       	ldd	r25, Y+5	; 0x05
    224c:	83 34       	cpi	r24, 0x43	; 67
    224e:	91 05       	cpc	r25, r1
    2250:	34 f4       	brge	.+12     	; 0x225e <MDIO_vidGetPinValue+0x3c>
    2252:	2c 81       	ldd	r18, Y+4	; 0x04
    2254:	3d 81       	ldd	r19, Y+5	; 0x05
    2256:	21 34       	cpi	r18, 0x41	; 65
    2258:	31 05       	cpc	r19, r1
    225a:	61 f0       	breq	.+24     	; 0x2274 <MDIO_vidGetPinValue+0x52>
    225c:	52 c0       	rjmp	.+164    	; 0x2302 <MDIO_vidGetPinValue+0xe0>
    225e:	4c 81       	ldd	r20, Y+4	; 0x04
    2260:	5d 81       	ldd	r21, Y+5	; 0x05
    2262:	43 34       	cpi	r20, 0x43	; 67
    2264:	51 05       	cpc	r21, r1
    2266:	51 f1       	breq	.+84     	; 0x22bc <MDIO_vidGetPinValue+0x9a>
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	9d 81       	ldd	r25, Y+5	; 0x05
    226c:	84 34       	cpi	r24, 0x44	; 68
    226e:	91 05       	cpc	r25, r1
    2270:	b9 f1       	breq	.+110    	; 0x22e0 <MDIO_vidGetPinValue+0xbe>
    2272:	47 c0       	rjmp	.+142    	; 0x2302 <MDIO_vidGetPinValue+0xe0>
	{
	case PORT_A:	get = GET_BIT(PINA,cpy_u8PinNumber); break;
    2274:	e9 e3       	ldi	r30, 0x39	; 57
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	88 2f       	mov	r24, r24
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a9 01       	movw	r20, r18
    2286:	02 c0       	rjmp	.+4      	; 0x228c <MDIO_vidGetPinValue+0x6a>
    2288:	55 95       	asr	r21
    228a:	47 95       	ror	r20
    228c:	8a 95       	dec	r24
    228e:	e2 f7       	brpl	.-8      	; 0x2288 <MDIO_vidGetPinValue+0x66>
    2290:	ca 01       	movw	r24, r20
    2292:	81 70       	andi	r24, 0x01	; 1
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	35 c0       	rjmp	.+106    	; 0x2302 <MDIO_vidGetPinValue+0xe0>

	case PORT_B:	get = GET_BIT(PINB,cpy_u8PinNumber); break;
    2298:	e6 e3       	ldi	r30, 0x36	; 54
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a9 01       	movw	r20, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <MDIO_vidGetPinValue+0x8e>
    22ac:	55 95       	asr	r21
    22ae:	47 95       	ror	r20
    22b0:	8a 95       	dec	r24
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <MDIO_vidGetPinValue+0x8a>
    22b4:	ca 01       	movw	r24, r20
    22b6:	81 70       	andi	r24, 0x01	; 1
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	23 c0       	rjmp	.+70     	; 0x2302 <MDIO_vidGetPinValue+0xe0>

	case PORT_C:	get = GET_BIT(PINC,cpy_u8PinNumber); break;
    22bc:	e3 e3       	ldi	r30, 0x33	; 51
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a9 01       	movw	r20, r18
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <MDIO_vidGetPinValue+0xb2>
    22d0:	55 95       	asr	r21
    22d2:	47 95       	ror	r20
    22d4:	8a 95       	dec	r24
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <MDIO_vidGetPinValue+0xae>
    22d8:	ca 01       	movw	r24, r20
    22da:	81 70       	andi	r24, 0x01	; 1
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	11 c0       	rjmp	.+34     	; 0x2302 <MDIO_vidGetPinValue+0xe0>

	case PORT_D:	get = GET_BIT(PIND,cpy_u8PinNumber); break;
    22e0:	e0 e3       	ldi	r30, 0x30	; 48
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a9 01       	movw	r20, r18
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <MDIO_vidGetPinValue+0xd6>
    22f4:	55 95       	asr	r21
    22f6:	47 95       	ror	r20
    22f8:	8a 95       	dec	r24
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <MDIO_vidGetPinValue+0xd2>
    22fc:	ca 01       	movw	r24, r20
    22fe:	81 70       	andi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01

	default:		/*wrong PORT Number*/ break;
	}
	return get ;
    2302:	89 81       	ldd	r24, Y+1	; 0x01
}
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <MDIO_vidSetPortDirection>:

void MDIO_vidSetPortDirection(u8 cpy_u8PortNumber, u8 cpy_u8PortDirection)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <MDIO_vidSetPortDirection+0x6>
    231a:	00 d0       	rcall	.+0      	; 0x231c <MDIO_vidSetPortDirection+0x8>
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	6a 83       	std	Y+2, r22	; 0x02
	//DDRs
	switch(cpy_u8PortNumber)
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	3c 83       	std	Y+4, r19	; 0x04
    232c:	2b 83       	std	Y+3, r18	; 0x03
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	82 34       	cpi	r24, 0x42	; 66
    2334:	91 05       	cpc	r25, r1
    2336:	d9 f0       	breq	.+54     	; 0x236e <MDIO_vidSetPortDirection+0x5a>
    2338:	2b 81       	ldd	r18, Y+3	; 0x03
    233a:	3c 81       	ldd	r19, Y+4	; 0x04
    233c:	23 34       	cpi	r18, 0x43	; 67
    233e:	31 05       	cpc	r19, r1
    2340:	34 f4       	brge	.+12     	; 0x234e <MDIO_vidSetPortDirection+0x3a>
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	81 34       	cpi	r24, 0x41	; 65
    2348:	91 05       	cpc	r25, r1
    234a:	61 f0       	breq	.+24     	; 0x2364 <MDIO_vidSetPortDirection+0x50>
    234c:	1e c0       	rjmp	.+60     	; 0x238a <MDIO_vidSetPortDirection+0x76>
    234e:	2b 81       	ldd	r18, Y+3	; 0x03
    2350:	3c 81       	ldd	r19, Y+4	; 0x04
    2352:	23 34       	cpi	r18, 0x43	; 67
    2354:	31 05       	cpc	r19, r1
    2356:	81 f0       	breq	.+32     	; 0x2378 <MDIO_vidSetPortDirection+0x64>
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	84 34       	cpi	r24, 0x44	; 68
    235e:	91 05       	cpc	r25, r1
    2360:	81 f0       	breq	.+32     	; 0x2382 <MDIO_vidSetPortDirection+0x6e>
    2362:	13 c0       	rjmp	.+38     	; 0x238a <MDIO_vidSetPortDirection+0x76>
	{
	case PORT_A:	{DDRA = cpy_u8PortDirection; break;}
    2364:	ea e3       	ldi	r30, 0x3A	; 58
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	80 83       	st	Z, r24
    236c:	0e c0       	rjmp	.+28     	; 0x238a <MDIO_vidSetPortDirection+0x76>

	case PORT_B:	{DDRB = cpy_u8PortDirection; break;}
    236e:	e7 e3       	ldi	r30, 0x37	; 55
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	80 83       	st	Z, r24
    2376:	09 c0       	rjmp	.+18     	; 0x238a <MDIO_vidSetPortDirection+0x76>

	case PORT_C:    {DDRC = cpy_u8PortDirection; break;}
    2378:	e4 e3       	ldi	r30, 0x34	; 52
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	80 83       	st	Z, r24
    2380:	04 c0       	rjmp	.+8      	; 0x238a <MDIO_vidSetPortDirection+0x76>

	case PORT_D:	{DDRD = cpy_u8PortDirection; break;}
    2382:	e1 e3       	ldi	r30, 0x31	; 49
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	80 83       	st	Z, r24

	default:    	{/* wrong port number */ break;}
	}
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <MDIO_vidSetPortvalue>:

void MDIO_vidSetPortvalue(u8 cpy_u8PortNumber, u8 cpy_u8PortValue)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <MDIO_vidSetPortvalue+0x6>
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <MDIO_vidSetPortvalue+0x8>
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	6a 83       	std	Y+2, r22	; 0x02
	//PORTs registers
	switch(cpy_u8PortNumber)
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	3c 83       	std	Y+4, r19	; 0x04
    23b0:	2b 83       	std	Y+3, r18	; 0x03
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	82 34       	cpi	r24, 0x42	; 66
    23b8:	91 05       	cpc	r25, r1
    23ba:	d9 f0       	breq	.+54     	; 0x23f2 <MDIO_vidSetPortvalue+0x5a>
    23bc:	2b 81       	ldd	r18, Y+3	; 0x03
    23be:	3c 81       	ldd	r19, Y+4	; 0x04
    23c0:	23 34       	cpi	r18, 0x43	; 67
    23c2:	31 05       	cpc	r19, r1
    23c4:	34 f4       	brge	.+12     	; 0x23d2 <MDIO_vidSetPortvalue+0x3a>
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ca:	81 34       	cpi	r24, 0x41	; 65
    23cc:	91 05       	cpc	r25, r1
    23ce:	61 f0       	breq	.+24     	; 0x23e8 <MDIO_vidSetPortvalue+0x50>
    23d0:	1e c0       	rjmp	.+60     	; 0x240e <MDIO_vidSetPortvalue+0x76>
    23d2:	2b 81       	ldd	r18, Y+3	; 0x03
    23d4:	3c 81       	ldd	r19, Y+4	; 0x04
    23d6:	23 34       	cpi	r18, 0x43	; 67
    23d8:	31 05       	cpc	r19, r1
    23da:	81 f0       	breq	.+32     	; 0x23fc <MDIO_vidSetPortvalue+0x64>
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	9c 81       	ldd	r25, Y+4	; 0x04
    23e0:	84 34       	cpi	r24, 0x44	; 68
    23e2:	91 05       	cpc	r25, r1
    23e4:	81 f0       	breq	.+32     	; 0x2406 <MDIO_vidSetPortvalue+0x6e>
    23e6:	13 c0       	rjmp	.+38     	; 0x240e <MDIO_vidSetPortvalue+0x76>
	{
	case PORT_A:    {PORTA = cpy_u8PortValue; break;}
    23e8:	eb e3       	ldi	r30, 0x3B	; 59
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	80 83       	st	Z, r24
    23f0:	0e c0       	rjmp	.+28     	; 0x240e <MDIO_vidSetPortvalue+0x76>

	case PORT_B:	{PORTB = cpy_u8PortValue; break;}
    23f2:	e8 e3       	ldi	r30, 0x38	; 56
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	80 83       	st	Z, r24
    23fa:	09 c0       	rjmp	.+18     	; 0x240e <MDIO_vidSetPortvalue+0x76>

	case PORT_C:	{PORTC = cpy_u8PortValue; break;}
    23fc:	e5 e3       	ldi	r30, 0x35	; 53
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	80 83       	st	Z, r24
    2404:	04 c0       	rjmp	.+8      	; 0x240e <MDIO_vidSetPortvalue+0x76>

	case PORT_D:	{PORTD = cpy_u8PortValue; break;}
    2406:	e2 e3       	ldi	r30, 0x32	; 50
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	80 83       	st	Z, r24

	default:    	{/* wrong port number */ break;}
	}
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <MDIO_vidGetPortValue>:

void MDIO_vidGetPortValue(u8 cpy_u8PortNumber, u8* buf_u8PortValue)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	00 d0       	rcall	.+0      	; 0x2422 <MDIO_vidGetPortValue+0x6>
    2422:	00 d0       	rcall	.+0      	; 0x2424 <MDIO_vidGetPortValue+0x8>
    2424:	0f 92       	push	r0
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	7b 83       	std	Y+3, r23	; 0x03
    242e:	6a 83       	std	Y+2, r22	; 0x02
	//PINs registers
	switch(cpy_u8PortNumber)
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	3d 83       	std	Y+5, r19	; 0x05
    2438:	2c 83       	std	Y+4, r18	; 0x04
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	9d 81       	ldd	r25, Y+5	; 0x05
    243e:	82 34       	cpi	r24, 0x42	; 66
    2440:	91 05       	cpc	r25, r1
    2442:	e9 f0       	breq	.+58     	; 0x247e <MDIO_vidGetPortValue+0x62>
    2444:	2c 81       	ldd	r18, Y+4	; 0x04
    2446:	3d 81       	ldd	r19, Y+5	; 0x05
    2448:	23 34       	cpi	r18, 0x43	; 67
    244a:	31 05       	cpc	r19, r1
    244c:	34 f4       	brge	.+12     	; 0x245a <MDIO_vidGetPortValue+0x3e>
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	9d 81       	ldd	r25, Y+5	; 0x05
    2452:	81 34       	cpi	r24, 0x41	; 65
    2454:	91 05       	cpc	r25, r1
    2456:	61 f0       	breq	.+24     	; 0x2470 <MDIO_vidGetPortValue+0x54>
    2458:	26 c0       	rjmp	.+76     	; 0x24a6 <MDIO_vidGetPortValue+0x8a>
    245a:	2c 81       	ldd	r18, Y+4	; 0x04
    245c:	3d 81       	ldd	r19, Y+5	; 0x05
    245e:	23 34       	cpi	r18, 0x43	; 67
    2460:	31 05       	cpc	r19, r1
    2462:	a1 f0       	breq	.+40     	; 0x248c <MDIO_vidGetPortValue+0x70>
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	84 34       	cpi	r24, 0x44	; 68
    246a:	91 05       	cpc	r25, r1
    246c:	b1 f0       	breq	.+44     	; 0x249a <MDIO_vidGetPortValue+0x7e>
    246e:	1b c0       	rjmp	.+54     	; 0x24a6 <MDIO_vidGetPortValue+0x8a>
	{
	case PORT_A:    {*buf_u8PortValue = PINA; break;}
    2470:	e9 e3       	ldi	r30, 0x39	; 57
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	ea 81       	ldd	r30, Y+2	; 0x02
    2478:	fb 81       	ldd	r31, Y+3	; 0x03
    247a:	80 83       	st	Z, r24
    247c:	14 c0       	rjmp	.+40     	; 0x24a6 <MDIO_vidGetPortValue+0x8a>

	case PORT_B:	{*buf_u8PortValue = PINB; break;}
    247e:	e6 e3       	ldi	r30, 0x36	; 54
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	ea 81       	ldd	r30, Y+2	; 0x02
    2486:	fb 81       	ldd	r31, Y+3	; 0x03
    2488:	80 83       	st	Z, r24
    248a:	0d c0       	rjmp	.+26     	; 0x24a6 <MDIO_vidGetPortValue+0x8a>

	case PORT_C:	{*buf_u8PortValue = PINC; break;}
    248c:	e3 e3       	ldi	r30, 0x33	; 51
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	ea 81       	ldd	r30, Y+2	; 0x02
    2494:	fb 81       	ldd	r31, Y+3	; 0x03
    2496:	80 83       	st	Z, r24
    2498:	06 c0       	rjmp	.+12     	; 0x24a6 <MDIO_vidGetPortValue+0x8a>

	case PORT_D:   	{*buf_u8PortValue = PIND; break;}
    249a:	e0 e3       	ldi	r30, 0x30	; 48
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	ea 81       	ldd	r30, Y+2	; 0x02
    24a2:	fb 81       	ldd	r31, Y+3	; 0x03
    24a4:	80 83       	st	Z, r24

	default:	{/* wrong port number */ break;}
	}
}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <main>:
#include "LCD.h"
#include "dioo_int.h"
#include <util/delay.h>

int main()
{
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	c4 54       	subi	r28, 0x44	; 68
    24c4:	d0 40       	sbci	r29, 0x00	; 0
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
	u8 key;
	u8 i = 0;
    24d0:	fe 01       	movw	r30, r28
    24d2:	ed 5b       	subi	r30, 0xBD	; 189
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	10 82       	st	Z, r1
	u32 num1 = 0;
    24d8:	fe 01       	movw	r30, r28
    24da:	ff 96       	adiw	r30, 0x3f	; 63
    24dc:	10 82       	st	Z, r1
    24de:	11 82       	std	Z+1, r1	; 0x01
    24e0:	12 82       	std	Z+2, r1	; 0x02
    24e2:	13 82       	std	Z+3, r1	; 0x03
	u32 x ;
	u8 k ;
	u8 j = 0;
    24e4:	19 ae       	std	Y+57, r1	; 0x39
	HCLCD_vidInit();
    24e6:	0e 94 a2 06 	call	0xd44	; 0xd44 <HCLCD_vidInit>
	keybad_inti();
    24ea:	0e 94 cb 05 	call	0xb96	; 0xb96 <keybad_inti>
	HCLCD_vidGoTo(0,0);
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <HCLCD_vidGoTo>
	HCLCD_vidSendString("WELCOME MOHAMED");
    24f6:	80 e6       	ldi	r24, 0x60	; 96
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 38 0b 	call	0x1670	; 0x1670 <HCLCD_vidSendString>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e8       	ldi	r25, 0x80	; 128
    2502:	ab eb       	ldi	r26, 0xBB	; 187
    2504:	b4 e4       	ldi	r27, 0x44	; 68
    2506:	8d ab       	std	Y+53, r24	; 0x35
    2508:	9e ab       	std	Y+54, r25	; 0x36
    250a:	af ab       	std	Y+55, r26	; 0x37
    250c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250e:	6d a9       	ldd	r22, Y+53	; 0x35
    2510:	7e a9       	ldd	r23, Y+54	; 0x36
    2512:	8f a9       	ldd	r24, Y+55	; 0x37
    2514:	98 ad       	ldd	r25, Y+56	; 0x38
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a ef       	ldi	r20, 0xFA	; 250
    251c:	54 e4       	ldi	r21, 0x44	; 68
    251e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	89 ab       	std	Y+49, r24	; 0x31
    2528:	9a ab       	std	Y+50, r25	; 0x32
    252a:	ab ab       	std	Y+51, r26	; 0x33
    252c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    252e:	69 a9       	ldd	r22, Y+49	; 0x31
    2530:	7a a9       	ldd	r23, Y+50	; 0x32
    2532:	8b a9       	ldd	r24, Y+51	; 0x33
    2534:	9c a9       	ldd	r25, Y+52	; 0x34
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e8       	ldi	r20, 0x80	; 128
    253c:	5f e3       	ldi	r21, 0x3F	; 63
    253e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2542:	88 23       	and	r24, r24
    2544:	2c f4       	brge	.+10     	; 0x2550 <main+0x9a>
		__ticks = 1;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	98 ab       	std	Y+48, r25	; 0x30
    254c:	8f a7       	std	Y+47, r24	; 0x2f
    254e:	3f c0       	rjmp	.+126    	; 0x25ce <main+0x118>
	else if (__tmp > 65535)
    2550:	69 a9       	ldd	r22, Y+49	; 0x31
    2552:	7a a9       	ldd	r23, Y+50	; 0x32
    2554:	8b a9       	ldd	r24, Y+51	; 0x33
    2556:	9c a9       	ldd	r25, Y+52	; 0x34
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	3f ef       	ldi	r19, 0xFF	; 255
    255c:	4f e7       	ldi	r20, 0x7F	; 127
    255e:	57 e4       	ldi	r21, 0x47	; 71
    2560:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2564:	18 16       	cp	r1, r24
    2566:	4c f5       	brge	.+82     	; 0x25ba <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2568:	6d a9       	ldd	r22, Y+53	; 0x35
    256a:	7e a9       	ldd	r23, Y+54	; 0x36
    256c:	8f a9       	ldd	r24, Y+55	; 0x37
    256e:	98 ad       	ldd	r25, Y+56	; 0x38
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e2       	ldi	r20, 0x20	; 32
    2576:	51 e4       	ldi	r21, 0x41	; 65
    2578:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	98 ab       	std	Y+48, r25	; 0x30
    258e:	8f a7       	std	Y+47, r24	; 0x2f
    2590:	0f c0       	rjmp	.+30     	; 0x25b0 <main+0xfa>
    2592:	88 ec       	ldi	r24, 0xC8	; 200
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9e a7       	std	Y+46, r25	; 0x2e
    2598:	8d a7       	std	Y+45, r24	; 0x2d
    259a:	8d a5       	ldd	r24, Y+45	; 0x2d
    259c:	9e a5       	ldd	r25, Y+46	; 0x2e
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <main+0xe8>
    25a2:	9e a7       	std	Y+46, r25	; 0x2e
    25a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a8:	98 a9       	ldd	r25, Y+48	; 0x30
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	98 ab       	std	Y+48, r25	; 0x30
    25ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b2:	98 a9       	ldd	r25, Y+48	; 0x30
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	69 f7       	brne	.-38     	; 0x2592 <main+0xdc>
    25b8:	14 c0       	rjmp	.+40     	; 0x25e2 <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ba:	69 a9       	ldd	r22, Y+49	; 0x31
    25bc:	7a a9       	ldd	r23, Y+50	; 0x32
    25be:	8b a9       	ldd	r24, Y+51	; 0x33
    25c0:	9c a9       	ldd	r25, Y+52	; 0x34
    25c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	98 ab       	std	Y+48, r25	; 0x30
    25cc:	8f a7       	std	Y+47, r24	; 0x2f
    25ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d0:	98 a9       	ldd	r25, Y+48	; 0x30
    25d2:	9c a7       	std	Y+44, r25	; 0x2c
    25d4:	8b a7       	std	Y+43, r24	; 0x2b
    25d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <main+0x124>
    25de:	9c a7       	std	Y+44, r25	; 0x2c
    25e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1500);
	HCLCD_vidClear();
    25e2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <HCLCD_vidClear>
	HCLCD_vidGoTo(0,0);
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <HCLCD_vidGoTo>
	HCLCD_vidSendString("* dec to bin ");
    25ee:	80 e7       	ldi	r24, 0x70	; 112
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 38 0b 	call	0x1670	; 0x1670 <HCLCD_vidSendString>
	HCLCD_vidGoTo(1,0);
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <HCLCD_vidGoTo>
	HCLCD_vidSendString("/ bin to dec ");
    25fe:	8e e7       	ldi	r24, 0x7E	; 126
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 38 0b 	call	0x1670	; 0x1670 <HCLCD_vidSendString>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e8       	ldi	r25, 0x80	; 128
    260a:	ab eb       	ldi	r26, 0xBB	; 187
    260c:	b4 e4       	ldi	r27, 0x44	; 68
    260e:	8f a3       	std	Y+39, r24	; 0x27
    2610:	98 a7       	std	Y+40, r25	; 0x28
    2612:	a9 a7       	std	Y+41, r26	; 0x29
    2614:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	6f a1       	ldd	r22, Y+39	; 0x27
    2618:	78 a5       	ldd	r23, Y+40	; 0x28
    261a:	89 a5       	ldd	r24, Y+41	; 0x29
    261c:	9a a5       	ldd	r25, Y+42	; 0x2a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a ef       	ldi	r20, 0xFA	; 250
    2624:	54 e4       	ldi	r21, 0x44	; 68
    2626:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	8b a3       	std	Y+35, r24	; 0x23
    2630:	9c a3       	std	Y+36, r25	; 0x24
    2632:	ad a3       	std	Y+37, r26	; 0x25
    2634:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2636:	6b a1       	ldd	r22, Y+35	; 0x23
    2638:	7c a1       	ldd	r23, Y+36	; 0x24
    263a:	8d a1       	ldd	r24, Y+37	; 0x25
    263c:	9e a1       	ldd	r25, Y+38	; 0x26
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <main+0x1a2>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9a a3       	std	Y+34, r25	; 0x22
    2654:	89 a3       	std	Y+33, r24	; 0x21
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <main+0x220>
	else if (__tmp > 65535)
    2658:	6b a1       	ldd	r22, Y+35	; 0x23
    265a:	7c a1       	ldd	r23, Y+36	; 0x24
    265c:	8d a1       	ldd	r24, Y+37	; 0x25
    265e:	9e a1       	ldd	r25, Y+38	; 0x26
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	4c f5       	brge	.+82     	; 0x26c2 <main+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2670:	6f a1       	ldd	r22, Y+39	; 0x27
    2672:	78 a5       	ldd	r23, Y+40	; 0x28
    2674:	89 a5       	ldd	r24, Y+41	; 0x29
    2676:	9a a5       	ldd	r25, Y+42	; 0x2a
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9a a3       	std	Y+34, r25	; 0x22
    2696:	89 a3       	std	Y+33, r24	; 0x21
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <main+0x202>
    269a:	88 ec       	ldi	r24, 0xC8	; 200
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	98 a3       	std	Y+32, r25	; 0x20
    26a0:	8f 8f       	std	Y+31, r24	; 0x1f
    26a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a4:	98 a1       	ldd	r25, Y+32	; 0x20
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <main+0x1f0>
    26aa:	98 a3       	std	Y+32, r25	; 0x20
    26ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	89 a1       	ldd	r24, Y+33	; 0x21
    26b0:	9a a1       	ldd	r25, Y+34	; 0x22
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	9a a3       	std	Y+34, r25	; 0x22
    26b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ba:	9a a1       	ldd	r25, Y+34	; 0x22
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <main+0x1e4>
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	6b a1       	ldd	r22, Y+35	; 0x23
    26c4:	7c a1       	ldd	r23, Y+36	; 0x24
    26c6:	8d a1       	ldd	r24, Y+37	; 0x25
    26c8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9a a3       	std	Y+34, r25	; 0x22
    26d4:	89 a3       	std	Y+33, r24	; 0x21
    26d6:	89 a1       	ldd	r24, Y+33	; 0x21
    26d8:	9a a1       	ldd	r25, Y+34	; 0x22
    26da:	9e 8f       	std	Y+30, r25	; 0x1e
    26dc:	8d 8f       	std	Y+29, r24	; 0x1d
    26de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <main+0x22c>
    26e6:	9e 8f       	std	Y+30, r25	; 0x1e
    26e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1500);
	HCLCD_vidClear();
    26ea:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <HCLCD_vidClear>
	while(1)
	{
		key=keybad_PressKey();
    26ee:	0e 94 da 05 	call	0xbb4	; 0xbb4 <keybad_PressKey>
    26f2:	fe 01       	movw	r30, r28
    26f4:	ec 5b       	subi	r30, 0xBC	; 188
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 83       	st	Z, r24
		if(key!=NO_KEY)
    26fa:	fe 01       	movw	r30, r28
    26fc:	ec 5b       	subi	r30, 0xBC	; 188
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	84 35       	cpi	r24, 0x54	; 84
    2704:	09 f4       	brne	.+2      	; 0x2708 <main+0x252>
    2706:	d3 c3       	rjmp	.+1958   	; 0x2eae <main+0x9f8>
		{
			if(key>='0'&&key<='9')
    2708:	fe 01       	movw	r30, r28
    270a:	ec 5b       	subi	r30, 0xBC	; 188
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	80 81       	ld	r24, Z
    2710:	80 33       	cpi	r24, 0x30	; 48
    2712:	08 f4       	brcc	.+2      	; 0x2716 <main+0x260>
    2714:	41 c0       	rjmp	.+130    	; 0x2798 <main+0x2e2>
    2716:	fe 01       	movw	r30, r28
    2718:	ec 5b       	subi	r30, 0xBC	; 188
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	8a 33       	cpi	r24, 0x3A	; 58
    2720:	d8 f5       	brcc	.+118    	; 0x2798 <main+0x2e2>
			{
				HCLCD_vidGoTo(0,i);
    2722:	fe 01       	movw	r30, r28
    2724:	ed 5b       	subi	r30, 0xBD	; 189
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	60 81       	ld	r22, Z
    272c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <HCLCD_vidGoTo>
				HCLCD_vidSendData(key);
    2730:	fe 01       	movw	r30, r28
    2732:	ec 5b       	subi	r30, 0xBC	; 188
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	0e 94 2d 0a 	call	0x145a	; 0x145a <HCLCD_vidSendData>
				num1=num1*10+(key -'0');
    273c:	fe 01       	movw	r30, r28
    273e:	ff 96       	adiw	r30, 0x3f	; 63
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	a2 81       	ldd	r26, Z+2	; 0x02
    2746:	b3 81       	ldd	r27, Z+3	; 0x03
    2748:	2a e0       	ldi	r18, 0x0A	; 10
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__mulsi3>
    2758:	9b 01       	movw	r18, r22
    275a:	ac 01       	movw	r20, r24
    275c:	fe 01       	movw	r30, r28
    275e:	ec 5b       	subi	r30, 0xBC	; 188
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 81       	ld	r24, Z
    2764:	88 2f       	mov	r24, r24
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	c0 97       	sbiw	r24, 0x30	; 48
    276a:	aa 27       	eor	r26, r26
    276c:	97 fd       	sbrc	r25, 7
    276e:	a0 95       	com	r26
    2770:	ba 2f       	mov	r27, r26
    2772:	fe 01       	movw	r30, r28
    2774:	ff 96       	adiw	r30, 0x3f	; 63
    2776:	82 0f       	add	r24, r18
    2778:	93 1f       	adc	r25, r19
    277a:	a4 1f       	adc	r26, r20
    277c:	b5 1f       	adc	r27, r21
    277e:	80 83       	st	Z, r24
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	a2 83       	std	Z+2, r26	; 0x02
    2784:	b3 83       	std	Z+3, r27	; 0x03
				i++;
    2786:	de 01       	movw	r26, r28
    2788:	ad 5b       	subi	r26, 0xBD	; 189
    278a:	bf 4f       	sbci	r27, 0xFF	; 255
    278c:	fe 01       	movw	r30, r28
    278e:	ed 5b       	subi	r30, 0xBD	; 189
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	8f 5f       	subi	r24, 0xFF	; 255
    2796:	8c 93       	st	X, r24

			}
			if(key=='*')
    2798:	fe 01       	movw	r30, r28
    279a:	ec 5b       	subi	r30, 0xBC	; 188
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	80 81       	ld	r24, Z
    27a0:	8a 32       	cpi	r24, 0x2A	; 42
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <main+0x2f0>
    27a4:	b1 c1       	rjmp	.+866    	; 0x2b08 <main+0x652>
			{
				x = 0;
    27a6:	1b ae       	std	Y+59, r1	; 0x3b
    27a8:	1c ae       	std	Y+60, r1	; 0x3c
    27aa:	1d ae       	std	Y+61, r1	; 0x3d
    27ac:	1e ae       	std	Y+62, r1	; 0x3e
    27ae:	95 c1       	rjmp	.+810    	; 0x2ada <main+0x624>
				while (num1!=0)
				{
					if (num1 >= 512)
    27b0:	fe 01       	movw	r30, r28
    27b2:	ff 96       	adiw	r30, 0x3f	; 63
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	a2 81       	ldd	r26, Z+2	; 0x02
    27ba:	b3 81       	ldd	r27, Z+3	; 0x03
    27bc:	80 30       	cpi	r24, 0x00	; 0
    27be:	22 e0       	ldi	r18, 0x02	; 2
    27c0:	92 07       	cpc	r25, r18
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	a2 07       	cpc	r26, r18
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	b2 07       	cpc	r27, r18
    27ca:	f0 f0       	brcs	.+60     	; 0x2808 <main+0x352>
					{
						num1-=512;
    27cc:	9e 01       	movw	r18, r28
    27ce:	21 5c       	subi	r18, 0xC1	; 193
    27d0:	3f 4f       	sbci	r19, 0xFF	; 255
    27d2:	fe 01       	movw	r30, r28
    27d4:	ff 96       	adiw	r30, 0x3f	; 63
    27d6:	80 81       	ld	r24, Z
    27d8:	91 81       	ldd	r25, Z+1	; 0x01
    27da:	a2 81       	ldd	r26, Z+2	; 0x02
    27dc:	b3 81       	ldd	r27, Z+3	; 0x03
    27de:	80 50       	subi	r24, 0x00	; 0
    27e0:	92 40       	sbci	r25, 0x02	; 2
    27e2:	a0 40       	sbci	r26, 0x00	; 0
    27e4:	b0 40       	sbci	r27, 0x00	; 0
    27e6:	f9 01       	movw	r30, r18
    27e8:	80 83       	st	Z, r24
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	a2 83       	std	Z+2, r26	; 0x02
    27ee:	b3 83       	std	Z+3, r27	; 0x03
						x+=1000000000;
    27f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    27f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    27f4:	ad ad       	ldd	r26, Y+61	; 0x3d
    27f6:	be ad       	ldd	r27, Y+62	; 0x3e
    27f8:	80 50       	subi	r24, 0x00	; 0
    27fa:	96 43       	sbci	r25, 0x36	; 54
    27fc:	a5 46       	sbci	r26, 0x65	; 101
    27fe:	b4 4c       	sbci	r27, 0xC4	; 196
    2800:	8b af       	std	Y+59, r24	; 0x3b
    2802:	9c af       	std	Y+60, r25	; 0x3c
    2804:	ad af       	std	Y+61, r26	; 0x3d
    2806:	be af       	std	Y+62, r27	; 0x3e
					}
					if (num1 >= 256)
    2808:	fe 01       	movw	r30, r28
    280a:	ff 96       	adiw	r30, 0x3f	; 63
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	a2 81       	ldd	r26, Z+2	; 0x02
    2812:	b3 81       	ldd	r27, Z+3	; 0x03
    2814:	8f 3f       	cpi	r24, 0xFF	; 255
    2816:	91 05       	cpc	r25, r1
    2818:	a1 05       	cpc	r26, r1
    281a:	b1 05       	cpc	r27, r1
    281c:	f9 f0       	breq	.+62     	; 0x285c <main+0x3a6>
    281e:	f0 f0       	brcs	.+60     	; 0x285c <main+0x3a6>
					{
						num1-=256;
    2820:	9e 01       	movw	r18, r28
    2822:	21 5c       	subi	r18, 0xC1	; 193
    2824:	3f 4f       	sbci	r19, 0xFF	; 255
    2826:	fe 01       	movw	r30, r28
    2828:	ff 96       	adiw	r30, 0x3f	; 63
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	a2 81       	ldd	r26, Z+2	; 0x02
    2830:	b3 81       	ldd	r27, Z+3	; 0x03
    2832:	80 50       	subi	r24, 0x00	; 0
    2834:	91 40       	sbci	r25, 0x01	; 1
    2836:	a0 40       	sbci	r26, 0x00	; 0
    2838:	b0 40       	sbci	r27, 0x00	; 0
    283a:	f9 01       	movw	r30, r18
    283c:	80 83       	st	Z, r24
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	a2 83       	std	Z+2, r26	; 0x02
    2842:	b3 83       	std	Z+3, r27	; 0x03
						x+=100000000;
    2844:	8b ad       	ldd	r24, Y+59	; 0x3b
    2846:	9c ad       	ldd	r25, Y+60	; 0x3c
    2848:	ad ad       	ldd	r26, Y+61	; 0x3d
    284a:	be ad       	ldd	r27, Y+62	; 0x3e
    284c:	80 50       	subi	r24, 0x00	; 0
    284e:	9f 41       	sbci	r25, 0x1F	; 31
    2850:	aa 40       	sbci	r26, 0x0A	; 10
    2852:	ba 4f       	sbci	r27, 0xFA	; 250
    2854:	8b af       	std	Y+59, r24	; 0x3b
    2856:	9c af       	std	Y+60, r25	; 0x3c
    2858:	ad af       	std	Y+61, r26	; 0x3d
    285a:	be af       	std	Y+62, r27	; 0x3e
					}
					if (num1 >= 128)
    285c:	fe 01       	movw	r30, r28
    285e:	ff 96       	adiw	r30, 0x3f	; 63
    2860:	80 81       	ld	r24, Z
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	a2 81       	ldd	r26, Z+2	; 0x02
    2866:	b3 81       	ldd	r27, Z+3	; 0x03
    2868:	80 38       	cpi	r24, 0x80	; 128
    286a:	91 05       	cpc	r25, r1
    286c:	a1 05       	cpc	r26, r1
    286e:	b1 05       	cpc	r27, r1
    2870:	f0 f0       	brcs	.+60     	; 0x28ae <main+0x3f8>
					{
						num1-=128;
    2872:	9e 01       	movw	r18, r28
    2874:	21 5c       	subi	r18, 0xC1	; 193
    2876:	3f 4f       	sbci	r19, 0xFF	; 255
    2878:	fe 01       	movw	r30, r28
    287a:	ff 96       	adiw	r30, 0x3f	; 63
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	a2 81       	ldd	r26, Z+2	; 0x02
    2882:	b3 81       	ldd	r27, Z+3	; 0x03
    2884:	80 58       	subi	r24, 0x80	; 128
    2886:	90 40       	sbci	r25, 0x00	; 0
    2888:	a0 40       	sbci	r26, 0x00	; 0
    288a:	b0 40       	sbci	r27, 0x00	; 0
    288c:	f9 01       	movw	r30, r18
    288e:	80 83       	st	Z, r24
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	a2 83       	std	Z+2, r26	; 0x02
    2894:	b3 83       	std	Z+3, r27	; 0x03
						x+=10000000;
    2896:	8b ad       	ldd	r24, Y+59	; 0x3b
    2898:	9c ad       	ldd	r25, Y+60	; 0x3c
    289a:	ad ad       	ldd	r26, Y+61	; 0x3d
    289c:	be ad       	ldd	r27, Y+62	; 0x3e
    289e:	80 58       	subi	r24, 0x80	; 128
    28a0:	99 46       	sbci	r25, 0x69	; 105
    28a2:	a7 46       	sbci	r26, 0x67	; 103
    28a4:	bf 4f       	sbci	r27, 0xFF	; 255
    28a6:	8b af       	std	Y+59, r24	; 0x3b
    28a8:	9c af       	std	Y+60, r25	; 0x3c
    28aa:	ad af       	std	Y+61, r26	; 0x3d
    28ac:	be af       	std	Y+62, r27	; 0x3e
					}
					if (num1 >= 64)
    28ae:	fe 01       	movw	r30, r28
    28b0:	ff 96       	adiw	r30, 0x3f	; 63
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	a2 81       	ldd	r26, Z+2	; 0x02
    28b8:	b3 81       	ldd	r27, Z+3	; 0x03
    28ba:	80 34       	cpi	r24, 0x40	; 64
    28bc:	91 05       	cpc	r25, r1
    28be:	a1 05       	cpc	r26, r1
    28c0:	b1 05       	cpc	r27, r1
    28c2:	f0 f0       	brcs	.+60     	; 0x2900 <main+0x44a>
					{
						num1-=64;
    28c4:	9e 01       	movw	r18, r28
    28c6:	21 5c       	subi	r18, 0xC1	; 193
    28c8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ca:	fe 01       	movw	r30, r28
    28cc:	ff 96       	adiw	r30, 0x3f	; 63
    28ce:	80 81       	ld	r24, Z
    28d0:	91 81       	ldd	r25, Z+1	; 0x01
    28d2:	a2 81       	ldd	r26, Z+2	; 0x02
    28d4:	b3 81       	ldd	r27, Z+3	; 0x03
    28d6:	80 54       	subi	r24, 0x40	; 64
    28d8:	90 40       	sbci	r25, 0x00	; 0
    28da:	a0 40       	sbci	r26, 0x00	; 0
    28dc:	b0 40       	sbci	r27, 0x00	; 0
    28de:	f9 01       	movw	r30, r18
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
						x+=1000000;
    28e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    28ec:	ad ad       	ldd	r26, Y+61	; 0x3d
    28ee:	be ad       	ldd	r27, Y+62	; 0x3e
    28f0:	80 5c       	subi	r24, 0xC0	; 192
    28f2:	9d 4b       	sbci	r25, 0xBD	; 189
    28f4:	a0 4f       	sbci	r26, 0xF0	; 240
    28f6:	bf 4f       	sbci	r27, 0xFF	; 255
    28f8:	8b af       	std	Y+59, r24	; 0x3b
    28fa:	9c af       	std	Y+60, r25	; 0x3c
    28fc:	ad af       	std	Y+61, r26	; 0x3d
    28fe:	be af       	std	Y+62, r27	; 0x3e
					}
					if (num1 >= 32)
    2900:	fe 01       	movw	r30, r28
    2902:	ff 96       	adiw	r30, 0x3f	; 63
    2904:	80 81       	ld	r24, Z
    2906:	91 81       	ldd	r25, Z+1	; 0x01
    2908:	a2 81       	ldd	r26, Z+2	; 0x02
    290a:	b3 81       	ldd	r27, Z+3	; 0x03
    290c:	80 32       	cpi	r24, 0x20	; 32
    290e:	91 05       	cpc	r25, r1
    2910:	a1 05       	cpc	r26, r1
    2912:	b1 05       	cpc	r27, r1
    2914:	e8 f0       	brcs	.+58     	; 0x2950 <main+0x49a>
					{
						num1-=32;
    2916:	9e 01       	movw	r18, r28
    2918:	21 5c       	subi	r18, 0xC1	; 193
    291a:	3f 4f       	sbci	r19, 0xFF	; 255
    291c:	fe 01       	movw	r30, r28
    291e:	ff 96       	adiw	r30, 0x3f	; 63
    2920:	80 81       	ld	r24, Z
    2922:	91 81       	ldd	r25, Z+1	; 0x01
    2924:	a2 81       	ldd	r26, Z+2	; 0x02
    2926:	b3 81       	ldd	r27, Z+3	; 0x03
    2928:	80 97       	sbiw	r24, 0x20	; 32
    292a:	a1 09       	sbc	r26, r1
    292c:	b1 09       	sbc	r27, r1
    292e:	f9 01       	movw	r30, r18
    2930:	80 83       	st	Z, r24
    2932:	91 83       	std	Z+1, r25	; 0x01
    2934:	a2 83       	std	Z+2, r26	; 0x02
    2936:	b3 83       	std	Z+3, r27	; 0x03
						x+=100000;
    2938:	8b ad       	ldd	r24, Y+59	; 0x3b
    293a:	9c ad       	ldd	r25, Y+60	; 0x3c
    293c:	ad ad       	ldd	r26, Y+61	; 0x3d
    293e:	be ad       	ldd	r27, Y+62	; 0x3e
    2940:	80 56       	subi	r24, 0x60	; 96
    2942:	99 47       	sbci	r25, 0x79	; 121
    2944:	ae 4f       	sbci	r26, 0xFE	; 254
    2946:	bf 4f       	sbci	r27, 0xFF	; 255
    2948:	8b af       	std	Y+59, r24	; 0x3b
    294a:	9c af       	std	Y+60, r25	; 0x3c
    294c:	ad af       	std	Y+61, r26	; 0x3d
    294e:	be af       	std	Y+62, r27	; 0x3e
					}
					if (num1 >= 16)
    2950:	fe 01       	movw	r30, r28
    2952:	ff 96       	adiw	r30, 0x3f	; 63
    2954:	80 81       	ld	r24, Z
    2956:	91 81       	ldd	r25, Z+1	; 0x01
    2958:	a2 81       	ldd	r26, Z+2	; 0x02
    295a:	b3 81       	ldd	r27, Z+3	; 0x03
    295c:	80 31       	cpi	r24, 0x10	; 16
    295e:	91 05       	cpc	r25, r1
    2960:	a1 05       	cpc	r26, r1
    2962:	b1 05       	cpc	r27, r1
    2964:	e8 f0       	brcs	.+58     	; 0x29a0 <main+0x4ea>
					{
						num1-=16;
    2966:	9e 01       	movw	r18, r28
    2968:	21 5c       	subi	r18, 0xC1	; 193
    296a:	3f 4f       	sbci	r19, 0xFF	; 255
    296c:	fe 01       	movw	r30, r28
    296e:	ff 96       	adiw	r30, 0x3f	; 63
    2970:	80 81       	ld	r24, Z
    2972:	91 81       	ldd	r25, Z+1	; 0x01
    2974:	a2 81       	ldd	r26, Z+2	; 0x02
    2976:	b3 81       	ldd	r27, Z+3	; 0x03
    2978:	40 97       	sbiw	r24, 0x10	; 16
    297a:	a1 09       	sbc	r26, r1
    297c:	b1 09       	sbc	r27, r1
    297e:	f9 01       	movw	r30, r18
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
						x+=10000;
    2988:	8b ad       	ldd	r24, Y+59	; 0x3b
    298a:	9c ad       	ldd	r25, Y+60	; 0x3c
    298c:	ad ad       	ldd	r26, Y+61	; 0x3d
    298e:	be ad       	ldd	r27, Y+62	; 0x3e
    2990:	80 5f       	subi	r24, 0xF0	; 240
    2992:	98 4d       	sbci	r25, 0xD8	; 216
    2994:	af 4f       	sbci	r26, 0xFF	; 255
    2996:	bf 4f       	sbci	r27, 0xFF	; 255
    2998:	8b af       	std	Y+59, r24	; 0x3b
    299a:	9c af       	std	Y+60, r25	; 0x3c
    299c:	ad af       	std	Y+61, r26	; 0x3d
    299e:	be af       	std	Y+62, r27	; 0x3e
					}
					if (num1 >= 8)
    29a0:	fe 01       	movw	r30, r28
    29a2:	ff 96       	adiw	r30, 0x3f	; 63
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	a2 81       	ldd	r26, Z+2	; 0x02
    29aa:	b3 81       	ldd	r27, Z+3	; 0x03
    29ac:	88 30       	cpi	r24, 0x08	; 8
    29ae:	91 05       	cpc	r25, r1
    29b0:	a1 05       	cpc	r26, r1
    29b2:	b1 05       	cpc	r27, r1
    29b4:	e8 f0       	brcs	.+58     	; 0x29f0 <main+0x53a>
					{
						num1-=8;
    29b6:	9e 01       	movw	r18, r28
    29b8:	21 5c       	subi	r18, 0xC1	; 193
    29ba:	3f 4f       	sbci	r19, 0xFF	; 255
    29bc:	fe 01       	movw	r30, r28
    29be:	ff 96       	adiw	r30, 0x3f	; 63
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	a2 81       	ldd	r26, Z+2	; 0x02
    29c6:	b3 81       	ldd	r27, Z+3	; 0x03
    29c8:	08 97       	sbiw	r24, 0x08	; 8
    29ca:	a1 09       	sbc	r26, r1
    29cc:	b1 09       	sbc	r27, r1
    29ce:	f9 01       	movw	r30, r18
    29d0:	80 83       	st	Z, r24
    29d2:	91 83       	std	Z+1, r25	; 0x01
    29d4:	a2 83       	std	Z+2, r26	; 0x02
    29d6:	b3 83       	std	Z+3, r27	; 0x03
						x+=1000;
    29d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    29da:	9c ad       	ldd	r25, Y+60	; 0x3c
    29dc:	ad ad       	ldd	r26, Y+61	; 0x3d
    29de:	be ad       	ldd	r27, Y+62	; 0x3e
    29e0:	88 51       	subi	r24, 0x18	; 24
    29e2:	9c 4f       	sbci	r25, 0xFC	; 252
    29e4:	af 4f       	sbci	r26, 0xFF	; 255
    29e6:	bf 4f       	sbci	r27, 0xFF	; 255
    29e8:	8b af       	std	Y+59, r24	; 0x3b
    29ea:	9c af       	std	Y+60, r25	; 0x3c
    29ec:	ad af       	std	Y+61, r26	; 0x3d
    29ee:	be af       	std	Y+62, r27	; 0x3e
					}
					if (num1 >= 4)
    29f0:	fe 01       	movw	r30, r28
    29f2:	ff 96       	adiw	r30, 0x3f	; 63
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	a2 81       	ldd	r26, Z+2	; 0x02
    29fa:	b3 81       	ldd	r27, Z+3	; 0x03
    29fc:	84 30       	cpi	r24, 0x04	; 4
    29fe:	91 05       	cpc	r25, r1
    2a00:	a1 05       	cpc	r26, r1
    2a02:	b1 05       	cpc	r27, r1
    2a04:	e8 f0       	brcs	.+58     	; 0x2a40 <main+0x58a>
					{
						num1-=4;
    2a06:	9e 01       	movw	r18, r28
    2a08:	21 5c       	subi	r18, 0xC1	; 193
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ff 96       	adiw	r30, 0x3f	; 63
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	a2 81       	ldd	r26, Z+2	; 0x02
    2a16:	b3 81       	ldd	r27, Z+3	; 0x03
    2a18:	04 97       	sbiw	r24, 0x04	; 4
    2a1a:	a1 09       	sbc	r26, r1
    2a1c:	b1 09       	sbc	r27, r1
    2a1e:	f9 01       	movw	r30, r18
    2a20:	80 83       	st	Z, r24
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	a2 83       	std	Z+2, r26	; 0x02
    2a26:	b3 83       	std	Z+3, r27	; 0x03
						x+=100;
    2a28:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a2a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a2c:	ad ad       	ldd	r26, Y+61	; 0x3d
    2a2e:	be ad       	ldd	r27, Y+62	; 0x3e
    2a30:	8c 59       	subi	r24, 0x9C	; 156
    2a32:	9f 4f       	sbci	r25, 0xFF	; 255
    2a34:	af 4f       	sbci	r26, 0xFF	; 255
    2a36:	bf 4f       	sbci	r27, 0xFF	; 255
    2a38:	8b af       	std	Y+59, r24	; 0x3b
    2a3a:	9c af       	std	Y+60, r25	; 0x3c
    2a3c:	ad af       	std	Y+61, r26	; 0x3d
    2a3e:	be af       	std	Y+62, r27	; 0x3e
					}
					if (num1 >= 2)
    2a40:	fe 01       	movw	r30, r28
    2a42:	ff 96       	adiw	r30, 0x3f	; 63
    2a44:	80 81       	ld	r24, Z
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	a2 81       	ldd	r26, Z+2	; 0x02
    2a4a:	b3 81       	ldd	r27, Z+3	; 0x03
    2a4c:	82 30       	cpi	r24, 0x02	; 2
    2a4e:	91 05       	cpc	r25, r1
    2a50:	a1 05       	cpc	r26, r1
    2a52:	b1 05       	cpc	r27, r1
    2a54:	e0 f0       	brcs	.+56     	; 0x2a8e <main+0x5d8>
					{
						num1-=2;
    2a56:	9e 01       	movw	r18, r28
    2a58:	21 5c       	subi	r18, 0xC1	; 193
    2a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ff 96       	adiw	r30, 0x3f	; 63
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	a2 81       	ldd	r26, Z+2	; 0x02
    2a66:	b3 81       	ldd	r27, Z+3	; 0x03
    2a68:	02 97       	sbiw	r24, 0x02	; 2
    2a6a:	a1 09       	sbc	r26, r1
    2a6c:	b1 09       	sbc	r27, r1
    2a6e:	f9 01       	movw	r30, r18
    2a70:	80 83       	st	Z, r24
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	a2 83       	std	Z+2, r26	; 0x02
    2a76:	b3 83       	std	Z+3, r27	; 0x03
						x+=10;
    2a78:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a7c:	ad ad       	ldd	r26, Y+61	; 0x3d
    2a7e:	be ad       	ldd	r27, Y+62	; 0x3e
    2a80:	0a 96       	adiw	r24, 0x0a	; 10
    2a82:	a1 1d       	adc	r26, r1
    2a84:	b1 1d       	adc	r27, r1
    2a86:	8b af       	std	Y+59, r24	; 0x3b
    2a88:	9c af       	std	Y+60, r25	; 0x3c
    2a8a:	ad af       	std	Y+61, r26	; 0x3d
    2a8c:	be af       	std	Y+62, r27	; 0x3e
					}
					if (num1 >= 1)
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ff 96       	adiw	r30, 0x3f	; 63
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	a2 81       	ldd	r26, Z+2	; 0x02
    2a98:	b3 81       	ldd	r27, Z+3	; 0x03
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	a1 05       	cpc	r26, r1
    2a9e:	b1 05       	cpc	r27, r1
    2aa0:	e1 f0       	breq	.+56     	; 0x2ada <main+0x624>
					{
						num1-=1;
    2aa2:	9e 01       	movw	r18, r28
    2aa4:	21 5c       	subi	r18, 0xC1	; 193
    2aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ff 96       	adiw	r30, 0x3f	; 63
    2aac:	80 81       	ld	r24, Z
    2aae:	91 81       	ldd	r25, Z+1	; 0x01
    2ab0:	a2 81       	ldd	r26, Z+2	; 0x02
    2ab2:	b3 81       	ldd	r27, Z+3	; 0x03
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	a1 09       	sbc	r26, r1
    2ab8:	b1 09       	sbc	r27, r1
    2aba:	f9 01       	movw	r30, r18
    2abc:	80 83       	st	Z, r24
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	a2 83       	std	Z+2, r26	; 0x02
    2ac2:	b3 83       	std	Z+3, r27	; 0x03
						x+=1;
    2ac4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ac6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ac8:	ad ad       	ldd	r26, Y+61	; 0x3d
    2aca:	be ad       	ldd	r27, Y+62	; 0x3e
    2acc:	01 96       	adiw	r24, 0x01	; 1
    2ace:	a1 1d       	adc	r26, r1
    2ad0:	b1 1d       	adc	r27, r1
    2ad2:	8b af       	std	Y+59, r24	; 0x3b
    2ad4:	9c af       	std	Y+60, r25	; 0x3c
    2ad6:	ad af       	std	Y+61, r26	; 0x3d
    2ad8:	be af       	std	Y+62, r27	; 0x3e

			}
			if(key=='*')
			{
				x = 0;
				while (num1!=0)
    2ada:	fe 01       	movw	r30, r28
    2adc:	ff 96       	adiw	r30, 0x3f	; 63
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ae4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	a1 05       	cpc	r26, r1
    2aea:	b1 05       	cpc	r27, r1
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <main+0x63a>
    2aee:	60 ce       	rjmp	.-832    	; 0x27b0 <main+0x2fa>
					{
						num1-=1;
						x+=1;
					}
				}
				HCLCD_vidGoTo(1,0);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <HCLCD_vidGoTo>
				HCLCD_vidSendNumber(x);
    2af8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2afa:	9c ad       	ldd	r25, Y+60	; 0x3c
    2afc:	ad ad       	ldd	r26, Y+61	; 0x3d
    2afe:	be ad       	ldd	r27, Y+62	; 0x3e
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <HCLCD_vidSendNumber>
			}
			if(key =='/')
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ec 5b       	subi	r30, 0xBC	; 188
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	8f 32       	cpi	r24, 0x2F	; 47
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <main+0x660>
    2b14:	cc c1       	rjmp	.+920    	; 0x2eae <main+0x9f8>
			{
				x = 0;
    2b16:	1b ae       	std	Y+59, r1	; 0x3b
    2b18:	1c ae       	std	Y+60, r1	; 0x3c
    2b1a:	1d ae       	std	Y+61, r1	; 0x3d
    2b1c:	1e ae       	std	Y+62, r1	; 0x3e
				HCLCD_vidGoTo(1,0);
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <HCLCD_vidGoTo>

				if(num1%10>1)
    2b26:	fe 01       	movw	r30, r28
    2b28:	ff 96       	adiw	r30, 0x3f	; 63
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b30:	b3 81       	ldd	r27, Z+3	; 0x03
    2b32:	2a e0       	ldi	r18, 0x0A	; 10
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	82 30       	cpi	r24, 0x02	; 2
    2b48:	91 05       	cpc	r25, r1
    2b4a:	a1 05       	cpc	r26, r1
    2b4c:	b1 05       	cpc	r27, r1
    2b4e:	08 f4       	brcc	.+2      	; 0x2b52 <main+0x69c>
    2b50:	83 c0       	rjmp	.+262    	; 0x2c58 <main+0x7a2>
				{
					HCLCD_vidSendString("ENTER A BIN NUM");
    2b52:	8c e8       	ldi	r24, 0x8C	; 140
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 38 0b 	call	0x1670	; 0x1670 <HCLCD_vidSendString>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	aa ef       	ldi	r26, 0xFA	; 250
    2b60:	b4 e4       	ldi	r27, 0x44	; 68
    2b62:	89 8f       	std	Y+25, r24	; 0x19
    2b64:	9a 8f       	std	Y+26, r25	; 0x1a
    2b66:	ab 8f       	std	Y+27, r26	; 0x1b
    2b68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	4a ef       	ldi	r20, 0xFA	; 250
    2b78:	54 e4       	ldi	r21, 0x44	; 68
    2b7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	8d 8b       	std	Y+21, r24	; 0x15
    2b84:	9e 8b       	std	Y+22, r25	; 0x16
    2b86:	af 8b       	std	Y+23, r26	; 0x17
    2b88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b90:	98 8d       	ldd	r25, Y+24	; 0x18
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e8       	ldi	r20, 0x80	; 128
    2b98:	5f e3       	ldi	r21, 0x3F	; 63
    2b9a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2b9e:	88 23       	and	r24, r24
    2ba0:	2c f4       	brge	.+10     	; 0x2bac <main+0x6f6>
		__ticks = 1;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	9c 8b       	std	Y+20, r25	; 0x14
    2ba8:	8b 8b       	std	Y+19, r24	; 0x13
    2baa:	3f c0       	rjmp	.+126    	; 0x2c2a <main+0x774>
	else if (__tmp > 65535)
    2bac:	6d 89       	ldd	r22, Y+21	; 0x15
    2bae:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	3f ef       	ldi	r19, 0xFF	; 255
    2bb8:	4f e7       	ldi	r20, 0x7F	; 127
    2bba:	57 e4       	ldi	r21, 0x47	; 71
    2bbc:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2bc0:	18 16       	cp	r1, r24
    2bc2:	4c f5       	brge	.+82     	; 0x2c16 <main+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e2       	ldi	r20, 0x20	; 32
    2bd2:	51 e4       	ldi	r21, 0x41	; 65
    2bd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9c 8b       	std	Y+20, r25	; 0x14
    2bea:	8b 8b       	std	Y+19, r24	; 0x13
    2bec:	0f c0       	rjmp	.+30     	; 0x2c0c <main+0x756>
    2bee:	88 ec       	ldi	r24, 0xC8	; 200
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	9a 8b       	std	Y+18, r25	; 0x12
    2bf4:	89 8b       	std	Y+17, r24	; 0x11
    2bf6:	89 89       	ldd	r24, Y+17	; 0x11
    2bf8:	9a 89       	ldd	r25, Y+18	; 0x12
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <main+0x744>
    2bfe:	9a 8b       	std	Y+18, r25	; 0x12
    2c00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c02:	8b 89       	ldd	r24, Y+19	; 0x13
    2c04:	9c 89       	ldd	r25, Y+20	; 0x14
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	9c 8b       	std	Y+20, r25	; 0x14
    2c0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	69 f7       	brne	.-38     	; 0x2bee <main+0x738>
    2c14:	14 c0       	rjmp	.+40     	; 0x2c3e <main+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c16:	6d 89       	ldd	r22, Y+21	; 0x15
    2c18:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	9c 8b       	std	Y+20, r25	; 0x14
    2c28:	8b 8b       	std	Y+19, r24	; 0x13
    2c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2e:	98 8b       	std	Y+16, r25	; 0x10
    2c30:	8f 87       	std	Y+15, r24	; 0x0f
    2c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c34:	98 89       	ldd	r25, Y+16	; 0x10
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <main+0x780>
    2c3a:	98 8b       	std	Y+16, r25	; 0x10
    2c3c:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(2000);
					HCLCD_vidClear();
    2c3e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <HCLCD_vidClear>
					num1=0;
    2c42:	fe 01       	movw	r30, r28
    2c44:	ff 96       	adiw	r30, 0x3f	; 63
    2c46:	10 82       	st	Z, r1
    2c48:	11 82       	std	Z+1, r1	; 0x01
    2c4a:	12 82       	std	Z+2, r1	; 0x02
    2c4c:	13 82       	std	Z+3, r1	; 0x03
					i=0;
    2c4e:	fe 01       	movw	r30, r28
    2c50:	ed 5b       	subi	r30, 0xBD	; 189
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	10 82       	st	Z, r1
    2c56:	2b c1       	rjmp	.+598    	; 0x2eae <main+0x9f8>
				}
				else if (num1%10==1 || num1%10==0)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ff 96       	adiw	r30, 0x3f	; 63
    2c5c:	80 81       	ld	r24, Z
    2c5e:	91 81       	ldd	r25, Z+1	; 0x01
    2c60:	a2 81       	ldd	r26, Z+2	; 0x02
    2c62:	b3 81       	ldd	r27, Z+3	; 0x03
    2c64:	2a e0       	ldi	r18, 0x0A	; 10
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	81 30       	cpi	r24, 0x01	; 1
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	a1 05       	cpc	r26, r1
    2c7e:	b1 05       	cpc	r27, r1
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <main+0x7ce>
    2c82:	02 c1       	rjmp	.+516    	; 0x2e88 <main+0x9d2>
    2c84:	fe 01       	movw	r30, r28
    2c86:	ff 96       	adiw	r30, 0x3f	; 63
    2c88:	80 81       	ld	r24, Z
    2c8a:	91 81       	ldd	r25, Z+1	; 0x01
    2c8c:	a2 81       	ldd	r26, Z+2	; 0x02
    2c8e:	b3 81       	ldd	r27, Z+3	; 0x03
    2c90:	2a e0       	ldi	r18, 0x0A	; 10
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	50 e0       	ldi	r21, 0x00	; 0
    2c98:	bc 01       	movw	r22, r24
    2c9a:	cd 01       	movw	r24, r26
    2c9c:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	a1 05       	cpc	r26, r1
    2ca8:	b1 05       	cpc	r27, r1
    2caa:	09 f0       	breq	.+2      	; 0x2cae <main+0x7f8>
    2cac:	00 c1       	rjmp	.+512    	; 0x2eae <main+0x9f8>
    2cae:	ec c0       	rjmp	.+472    	; 0x2e88 <main+0x9d2>
				{
					while(num1)
					{
						k = num1 %10 ;
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	ff 96       	adiw	r30, 0x3f	; 63
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	a2 81       	ldd	r26, Z+2	; 0x02
    2cba:	b3 81       	ldd	r27, Z+3	; 0x03
    2cbc:	2a e0       	ldi	r18, 0x0A	; 10
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	8a af       	std	Y+58, r24	; 0x3a
						num1 = num1 / 10 ;
    2cd2:	8e 01       	movw	r16, r28
    2cd4:	01 5c       	subi	r16, 0xC1	; 193
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ff 96       	adiw	r30, 0x3f	; 63
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	a2 81       	ldd	r26, Z+2	; 0x02
    2ce2:	b3 81       	ldd	r27, Z+3	; 0x03
    2ce4:	2a e0       	ldi	r18, 0x0A	; 10
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e0       	ldi	r20, 0x00	; 0
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 10 18 	call	0x3020	; 0x3020 <__udivmodsi4>
    2cf4:	da 01       	movw	r26, r20
    2cf6:	c9 01       	movw	r24, r18
    2cf8:	f8 01       	movw	r30, r16
    2cfa:	80 83       	st	Z, r24
    2cfc:	91 83       	std	Z+1, r25	; 0x01
    2cfe:	a2 83       	std	Z+2, r26	; 0x02
    2d00:	b3 83       	std	Z+3, r27	; 0x03
						j++;
    2d02:	89 ad       	ldd	r24, Y+57	; 0x39
    2d04:	8f 5f       	subi	r24, 0xFF	; 255
    2d06:	89 af       	std	Y+57, r24	; 0x39
						if(j==1)
    2d08:	89 ad       	ldd	r24, Y+57	; 0x39
    2d0a:	81 30       	cpi	r24, 0x01	; 1
    2d0c:	71 f4       	brne	.+28     	; 0x2d2a <main+0x874>
						{
							if(k==1)
    2d0e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	59 f4       	brne	.+22     	; 0x2d2a <main+0x874>
							{
								x=x+1;
    2d14:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d16:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d18:	ad ad       	ldd	r26, Y+61	; 0x3d
    2d1a:	be ad       	ldd	r27, Y+62	; 0x3e
    2d1c:	01 96       	adiw	r24, 0x01	; 1
    2d1e:	a1 1d       	adc	r26, r1
    2d20:	b1 1d       	adc	r27, r1
    2d22:	8b af       	std	Y+59, r24	; 0x3b
    2d24:	9c af       	std	Y+60, r25	; 0x3c
    2d26:	ad af       	std	Y+61, r26	; 0x3d
    2d28:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==2)
    2d2a:	89 ad       	ldd	r24, Y+57	; 0x39
    2d2c:	82 30       	cpi	r24, 0x02	; 2
    2d2e:	71 f4       	brne	.+28     	; 0x2d4c <main+0x896>
						{
							if(k==1)
    2d30:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d32:	81 30       	cpi	r24, 0x01	; 1
    2d34:	59 f4       	brne	.+22     	; 0x2d4c <main+0x896>
							{
								x=x+2;
    2d36:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d38:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d3a:	ad ad       	ldd	r26, Y+61	; 0x3d
    2d3c:	be ad       	ldd	r27, Y+62	; 0x3e
    2d3e:	02 96       	adiw	r24, 0x02	; 2
    2d40:	a1 1d       	adc	r26, r1
    2d42:	b1 1d       	adc	r27, r1
    2d44:	8b af       	std	Y+59, r24	; 0x3b
    2d46:	9c af       	std	Y+60, r25	; 0x3c
    2d48:	ad af       	std	Y+61, r26	; 0x3d
    2d4a:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==3)
    2d4c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d4e:	83 30       	cpi	r24, 0x03	; 3
    2d50:	71 f4       	brne	.+28     	; 0x2d6e <main+0x8b8>
						{
							if(k==1)
    2d52:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d54:	81 30       	cpi	r24, 0x01	; 1
    2d56:	59 f4       	brne	.+22     	; 0x2d6e <main+0x8b8>
							{
								x=x+4;
    2d58:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d5a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d5c:	ad ad       	ldd	r26, Y+61	; 0x3d
    2d5e:	be ad       	ldd	r27, Y+62	; 0x3e
    2d60:	04 96       	adiw	r24, 0x04	; 4
    2d62:	a1 1d       	adc	r26, r1
    2d64:	b1 1d       	adc	r27, r1
    2d66:	8b af       	std	Y+59, r24	; 0x3b
    2d68:	9c af       	std	Y+60, r25	; 0x3c
    2d6a:	ad af       	std	Y+61, r26	; 0x3d
    2d6c:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==4)
    2d6e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d70:	84 30       	cpi	r24, 0x04	; 4
    2d72:	71 f4       	brne	.+28     	; 0x2d90 <main+0x8da>
						{
							if(k==1)
    2d74:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	59 f4       	brne	.+22     	; 0x2d90 <main+0x8da>
							{
								x=x+8;
    2d7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d7e:	ad ad       	ldd	r26, Y+61	; 0x3d
    2d80:	be ad       	ldd	r27, Y+62	; 0x3e
    2d82:	08 96       	adiw	r24, 0x08	; 8
    2d84:	a1 1d       	adc	r26, r1
    2d86:	b1 1d       	adc	r27, r1
    2d88:	8b af       	std	Y+59, r24	; 0x3b
    2d8a:	9c af       	std	Y+60, r25	; 0x3c
    2d8c:	ad af       	std	Y+61, r26	; 0x3d
    2d8e:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==5)
    2d90:	89 ad       	ldd	r24, Y+57	; 0x39
    2d92:	85 30       	cpi	r24, 0x05	; 5
    2d94:	71 f4       	brne	.+28     	; 0x2db2 <main+0x8fc>
						{
							if(k==1)
    2d96:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d98:	81 30       	cpi	r24, 0x01	; 1
    2d9a:	59 f4       	brne	.+22     	; 0x2db2 <main+0x8fc>
							{
								x=x+16;
    2d9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2da0:	ad ad       	ldd	r26, Y+61	; 0x3d
    2da2:	be ad       	ldd	r27, Y+62	; 0x3e
    2da4:	40 96       	adiw	r24, 0x10	; 16
    2da6:	a1 1d       	adc	r26, r1
    2da8:	b1 1d       	adc	r27, r1
    2daa:	8b af       	std	Y+59, r24	; 0x3b
    2dac:	9c af       	std	Y+60, r25	; 0x3c
    2dae:	ad af       	std	Y+61, r26	; 0x3d
    2db0:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==6)
    2db2:	89 ad       	ldd	r24, Y+57	; 0x39
    2db4:	86 30       	cpi	r24, 0x06	; 6
    2db6:	71 f4       	brne	.+28     	; 0x2dd4 <main+0x91e>
						{
							if(k==1)
    2db8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dba:	81 30       	cpi	r24, 0x01	; 1
    2dbc:	59 f4       	brne	.+22     	; 0x2dd4 <main+0x91e>
							{
								x=x+32;
    2dbe:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dc0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dc2:	ad ad       	ldd	r26, Y+61	; 0x3d
    2dc4:	be ad       	ldd	r27, Y+62	; 0x3e
    2dc6:	80 96       	adiw	r24, 0x20	; 32
    2dc8:	a1 1d       	adc	r26, r1
    2dca:	b1 1d       	adc	r27, r1
    2dcc:	8b af       	std	Y+59, r24	; 0x3b
    2dce:	9c af       	std	Y+60, r25	; 0x3c
    2dd0:	ad af       	std	Y+61, r26	; 0x3d
    2dd2:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==7)
    2dd4:	89 ad       	ldd	r24, Y+57	; 0x39
    2dd6:	87 30       	cpi	r24, 0x07	; 7
    2dd8:	79 f4       	brne	.+30     	; 0x2df8 <main+0x942>
						{
							if(k==1)
    2dda:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ddc:	81 30       	cpi	r24, 0x01	; 1
    2dde:	61 f4       	brne	.+24     	; 0x2df8 <main+0x942>
							{
								x=x+64;
    2de0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2de2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2de4:	ad ad       	ldd	r26, Y+61	; 0x3d
    2de6:	be ad       	ldd	r27, Y+62	; 0x3e
    2de8:	80 5c       	subi	r24, 0xC0	; 192
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	af 4f       	sbci	r26, 0xFF	; 255
    2dee:	bf 4f       	sbci	r27, 0xFF	; 255
    2df0:	8b af       	std	Y+59, r24	; 0x3b
    2df2:	9c af       	std	Y+60, r25	; 0x3c
    2df4:	ad af       	std	Y+61, r26	; 0x3d
    2df6:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==8)
    2df8:	89 ad       	ldd	r24, Y+57	; 0x39
    2dfa:	88 30       	cpi	r24, 0x08	; 8
    2dfc:	79 f4       	brne	.+30     	; 0x2e1c <main+0x966>
						{
							if(k==1)
    2dfe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	61 f4       	brne	.+24     	; 0x2e1c <main+0x966>
							{
								x=x+128;
    2e04:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e06:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e08:	ad ad       	ldd	r26, Y+61	; 0x3d
    2e0a:	be ad       	ldd	r27, Y+62	; 0x3e
    2e0c:	80 58       	subi	r24, 0x80	; 128
    2e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e10:	af 4f       	sbci	r26, 0xFF	; 255
    2e12:	bf 4f       	sbci	r27, 0xFF	; 255
    2e14:	8b af       	std	Y+59, r24	; 0x3b
    2e16:	9c af       	std	Y+60, r25	; 0x3c
    2e18:	ad af       	std	Y+61, r26	; 0x3d
    2e1a:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==9)
    2e1c:	89 ad       	ldd	r24, Y+57	; 0x39
    2e1e:	89 30       	cpi	r24, 0x09	; 9
    2e20:	79 f4       	brne	.+30     	; 0x2e40 <main+0x98a>
						{
							if(k==1)
    2e22:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e24:	81 30       	cpi	r24, 0x01	; 1
    2e26:	61 f4       	brne	.+24     	; 0x2e40 <main+0x98a>
							{
								x=x+256;
    2e28:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e2a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e2c:	ad ad       	ldd	r26, Y+61	; 0x3d
    2e2e:	be ad       	ldd	r27, Y+62	; 0x3e
    2e30:	80 50       	subi	r24, 0x00	; 0
    2e32:	9f 4f       	sbci	r25, 0xFF	; 255
    2e34:	af 4f       	sbci	r26, 0xFF	; 255
    2e36:	bf 4f       	sbci	r27, 0xFF	; 255
    2e38:	8b af       	std	Y+59, r24	; 0x3b
    2e3a:	9c af       	std	Y+60, r25	; 0x3c
    2e3c:	ad af       	std	Y+61, r26	; 0x3d
    2e3e:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==10)
    2e40:	89 ad       	ldd	r24, Y+57	; 0x39
    2e42:	8a 30       	cpi	r24, 0x0A	; 10
    2e44:	79 f4       	brne	.+30     	; 0x2e64 <main+0x9ae>
						{
							if(k==1)
    2e46:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e48:	81 30       	cpi	r24, 0x01	; 1
    2e4a:	61 f4       	brne	.+24     	; 0x2e64 <main+0x9ae>
							{
								x=x+512;
    2e4c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e4e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e50:	ad ad       	ldd	r26, Y+61	; 0x3d
    2e52:	be ad       	ldd	r27, Y+62	; 0x3e
    2e54:	80 50       	subi	r24, 0x00	; 0
    2e56:	9e 4f       	sbci	r25, 0xFE	; 254
    2e58:	af 4f       	sbci	r26, 0xFF	; 255
    2e5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5c:	8b af       	std	Y+59, r24	; 0x3b
    2e5e:	9c af       	std	Y+60, r25	; 0x3c
    2e60:	ad af       	std	Y+61, r26	; 0x3d
    2e62:	be af       	std	Y+62, r27	; 0x3e
							}
						}
						if(j==11)
    2e64:	89 ad       	ldd	r24, Y+57	; 0x39
    2e66:	8b 30       	cpi	r24, 0x0B	; 11
    2e68:	79 f4       	brne	.+30     	; 0x2e88 <main+0x9d2>
						{
							if(k==1)
    2e6a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	61 f4       	brne	.+24     	; 0x2e88 <main+0x9d2>
							{
								x=x+1024;
    2e70:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e72:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e74:	ad ad       	ldd	r26, Y+61	; 0x3d
    2e76:	be ad       	ldd	r27, Y+62	; 0x3e
    2e78:	80 50       	subi	r24, 0x00	; 0
    2e7a:	9c 4f       	sbci	r25, 0xFC	; 252
    2e7c:	af 4f       	sbci	r26, 0xFF	; 255
    2e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e80:	8b af       	std	Y+59, r24	; 0x3b
    2e82:	9c af       	std	Y+60, r25	; 0x3c
    2e84:	ad af       	std	Y+61, r26	; 0x3d
    2e86:	be af       	std	Y+62, r27	; 0x3e
					num1=0;
					i=0;
				}
				else if (num1%10==1 || num1%10==0)
				{
					while(num1)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	ff 96       	adiw	r30, 0x3f	; 63
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	a2 81       	ldd	r26, Z+2	; 0x02
    2e92:	b3 81       	ldd	r27, Z+3	; 0x03
    2e94:	00 97       	sbiw	r24, 0x00	; 0
    2e96:	a1 05       	cpc	r26, r1
    2e98:	b1 05       	cpc	r27, r1
    2e9a:	09 f0       	breq	.+2      	; 0x2e9e <main+0x9e8>
    2e9c:	09 cf       	rjmp	.-494    	; 0x2cb0 <main+0x7fa>
							{
								x=x+1024;
							}
						}
					}
					HCLCD_vidSendNumber(x);
    2e9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ea0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ea2:	ad ad       	ldd	r26, Y+61	; 0x3d
    2ea4:	be ad       	ldd	r27, Y+62	; 0x3e
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <HCLCD_vidSendNumber>
				}
			}
		}
		if(key =='n')
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ec 5b       	subi	r30, 0xBC	; 188
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	8e 36       	cpi	r24, 0x6E	; 110
    2eb8:	09 f0       	breq	.+2      	; 0x2ebc <main+0xa06>
    2eba:	19 cc       	rjmp	.-1998   	; 0x26ee <main+0x238>
		{
			HCLCD_vidGoTo(0,0);
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <HCLCD_vidGoTo>
			HCLCD_vidSendString("* dec to bin ");
    2ec4:	80 e7       	ldi	r24, 0x70	; 112
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 38 0b 	call	0x1670	; 0x1670 <HCLCD_vidSendString>
			HCLCD_vidGoTo(1,0);
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <HCLCD_vidGoTo>
			HCLCD_vidSendString("/ bin to dec ");
    2ed4:	8e e7       	ldi	r24, 0x7E	; 126
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 38 0b 	call	0x1670	; 0x1670 <HCLCD_vidSendString>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e8       	ldi	r25, 0x80	; 128
    2ee0:	ab eb       	ldi	r26, 0xBB	; 187
    2ee2:	b4 e4       	ldi	r27, 0x44	; 68
    2ee4:	8b 87       	std	Y+11, r24	; 0x0b
    2ee6:	9c 87       	std	Y+12, r25	; 0x0c
    2ee8:	ad 87       	std	Y+13, r26	; 0x0d
    2eea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a ef       	ldi	r20, 0xFA	; 250
    2efa:	54 e4       	ldi	r21, 0x44	; 68
    2efc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	8f 83       	std	Y+7, r24	; 0x07
    2f06:	98 87       	std	Y+8, r25	; 0x08
    2f08:	a9 87       	std	Y+9, r26	; 0x09
    2f0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	2c f4       	brge	.+10     	; 0x2f2e <main+0xa78>
		__ticks = 1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    2f2c:	3f c0       	rjmp	.+126    	; 0x2fac <main+0xaf6>
	else if (__tmp > 65535)
    2f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f30:	78 85       	ldd	r23, Y+8	; 0x08
    2f32:	89 85       	ldd	r24, Y+9	; 0x09
    2f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	3f ef       	ldi	r19, 0xFF	; 255
    2f3a:	4f e7       	ldi	r20, 0x7F	; 127
    2f3c:	57 e4       	ldi	r21, 0x47	; 71
    2f3e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    2f42:	18 16       	cp	r1, r24
    2f44:	4c f5       	brge	.+82     	; 0x2f98 <main+0xae2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9e 83       	std	Y+6, r25	; 0x06
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
    2f6e:	0f c0       	rjmp	.+30     	; 0x2f8e <main+0xad8>
    2f70:	88 ec       	ldi	r24, 0xC8	; 200
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	9c 83       	std	Y+4, r25	; 0x04
    2f76:	8b 83       	std	Y+3, r24	; 0x03
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <main+0xac6>
    2f80:	9c 83       	std	Y+4, r25	; 0x04
    2f82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f84:	8d 81       	ldd	r24, Y+5	; 0x05
    2f86:	9e 81       	ldd	r25, Y+6	; 0x06
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	69 f7       	brne	.-38     	; 0x2f70 <main+0xaba>
    2f96:	14 c0       	rjmp	.+40     	; 0x2fc0 <main+0xb0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <main+0xb02>
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			HCLCD_vidClear();
    2fc0:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <HCLCD_vidClear>
			HCLCD_vidGoTo(0,0);
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <HCLCD_vidGoTo>
			num1=0;
    2fcc:	fe 01       	movw	r30, r28
    2fce:	ff 96       	adiw	r30, 0x3f	; 63
    2fd0:	10 82       	st	Z, r1
    2fd2:	11 82       	std	Z+1, r1	; 0x01
    2fd4:	12 82       	std	Z+2, r1	; 0x02
    2fd6:	13 82       	std	Z+3, r1	; 0x03
			i=0;
    2fd8:	fe 01       	movw	r30, r28
    2fda:	ed 5b       	subi	r30, 0xBD	; 189
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	10 82       	st	Z, r1
    2fe0:	86 cb       	rjmp	.-2292   	; 0x26ee <main+0x238>

00002fe2 <__mulsi3>:
    2fe2:	62 9f       	mul	r22, r18
    2fe4:	d0 01       	movw	r26, r0
    2fe6:	73 9f       	mul	r23, r19
    2fe8:	f0 01       	movw	r30, r0
    2fea:	82 9f       	mul	r24, r18
    2fec:	e0 0d       	add	r30, r0
    2fee:	f1 1d       	adc	r31, r1
    2ff0:	64 9f       	mul	r22, r20
    2ff2:	e0 0d       	add	r30, r0
    2ff4:	f1 1d       	adc	r31, r1
    2ff6:	92 9f       	mul	r25, r18
    2ff8:	f0 0d       	add	r31, r0
    2ffa:	83 9f       	mul	r24, r19
    2ffc:	f0 0d       	add	r31, r0
    2ffe:	74 9f       	mul	r23, r20
    3000:	f0 0d       	add	r31, r0
    3002:	65 9f       	mul	r22, r21
    3004:	f0 0d       	add	r31, r0
    3006:	99 27       	eor	r25, r25
    3008:	72 9f       	mul	r23, r18
    300a:	b0 0d       	add	r27, r0
    300c:	e1 1d       	adc	r30, r1
    300e:	f9 1f       	adc	r31, r25
    3010:	63 9f       	mul	r22, r19
    3012:	b0 0d       	add	r27, r0
    3014:	e1 1d       	adc	r30, r1
    3016:	f9 1f       	adc	r31, r25
    3018:	bd 01       	movw	r22, r26
    301a:	cf 01       	movw	r24, r30
    301c:	11 24       	eor	r1, r1
    301e:	08 95       	ret

00003020 <__udivmodsi4>:
    3020:	a1 e2       	ldi	r26, 0x21	; 33
    3022:	1a 2e       	mov	r1, r26
    3024:	aa 1b       	sub	r26, r26
    3026:	bb 1b       	sub	r27, r27
    3028:	fd 01       	movw	r30, r26
    302a:	0d c0       	rjmp	.+26     	; 0x3046 <__udivmodsi4_ep>

0000302c <__udivmodsi4_loop>:
    302c:	aa 1f       	adc	r26, r26
    302e:	bb 1f       	adc	r27, r27
    3030:	ee 1f       	adc	r30, r30
    3032:	ff 1f       	adc	r31, r31
    3034:	a2 17       	cp	r26, r18
    3036:	b3 07       	cpc	r27, r19
    3038:	e4 07       	cpc	r30, r20
    303a:	f5 07       	cpc	r31, r21
    303c:	20 f0       	brcs	.+8      	; 0x3046 <__udivmodsi4_ep>
    303e:	a2 1b       	sub	r26, r18
    3040:	b3 0b       	sbc	r27, r19
    3042:	e4 0b       	sbc	r30, r20
    3044:	f5 0b       	sbc	r31, r21

00003046 <__udivmodsi4_ep>:
    3046:	66 1f       	adc	r22, r22
    3048:	77 1f       	adc	r23, r23
    304a:	88 1f       	adc	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	1a 94       	dec	r1
    3050:	69 f7       	brne	.-38     	; 0x302c <__udivmodsi4_loop>
    3052:	60 95       	com	r22
    3054:	70 95       	com	r23
    3056:	80 95       	com	r24
    3058:	90 95       	com	r25
    305a:	9b 01       	movw	r18, r22
    305c:	ac 01       	movw	r20, r24
    305e:	bd 01       	movw	r22, r26
    3060:	cf 01       	movw	r24, r30
    3062:	08 95       	ret

00003064 <__divmodsi4>:
    3064:	97 fb       	bst	r25, 7
    3066:	09 2e       	mov	r0, r25
    3068:	05 26       	eor	r0, r21
    306a:	0e d0       	rcall	.+28     	; 0x3088 <__divmodsi4_neg1>
    306c:	57 fd       	sbrc	r21, 7
    306e:	04 d0       	rcall	.+8      	; 0x3078 <__divmodsi4_neg2>
    3070:	d7 df       	rcall	.-82     	; 0x3020 <__udivmodsi4>
    3072:	0a d0       	rcall	.+20     	; 0x3088 <__divmodsi4_neg1>
    3074:	00 1c       	adc	r0, r0
    3076:	38 f4       	brcc	.+14     	; 0x3086 <__divmodsi4_exit>

00003078 <__divmodsi4_neg2>:
    3078:	50 95       	com	r21
    307a:	40 95       	com	r20
    307c:	30 95       	com	r19
    307e:	21 95       	neg	r18
    3080:	3f 4f       	sbci	r19, 0xFF	; 255
    3082:	4f 4f       	sbci	r20, 0xFF	; 255
    3084:	5f 4f       	sbci	r21, 0xFF	; 255

00003086 <__divmodsi4_exit>:
    3086:	08 95       	ret

00003088 <__divmodsi4_neg1>:
    3088:	f6 f7       	brtc	.-4      	; 0x3086 <__divmodsi4_exit>
    308a:	90 95       	com	r25
    308c:	80 95       	com	r24
    308e:	70 95       	com	r23
    3090:	61 95       	neg	r22
    3092:	7f 4f       	sbci	r23, 0xFF	; 255
    3094:	8f 4f       	sbci	r24, 0xFF	; 255
    3096:	9f 4f       	sbci	r25, 0xFF	; 255
    3098:	08 95       	ret

0000309a <__prologue_saves__>:
    309a:	2f 92       	push	r2
    309c:	3f 92       	push	r3
    309e:	4f 92       	push	r4
    30a0:	5f 92       	push	r5
    30a2:	6f 92       	push	r6
    30a4:	7f 92       	push	r7
    30a6:	8f 92       	push	r8
    30a8:	9f 92       	push	r9
    30aa:	af 92       	push	r10
    30ac:	bf 92       	push	r11
    30ae:	cf 92       	push	r12
    30b0:	df 92       	push	r13
    30b2:	ef 92       	push	r14
    30b4:	ff 92       	push	r15
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	ca 1b       	sub	r28, r26
    30c4:	db 0b       	sbc	r29, r27
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	09 94       	ijmp

000030d2 <__epilogue_restores__>:
    30d2:	2a 88       	ldd	r2, Y+18	; 0x12
    30d4:	39 88       	ldd	r3, Y+17	; 0x11
    30d6:	48 88       	ldd	r4, Y+16	; 0x10
    30d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    30da:	6e 84       	ldd	r6, Y+14	; 0x0e
    30dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    30de:	8c 84       	ldd	r8, Y+12	; 0x0c
    30e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    30e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    30e4:	b9 84       	ldd	r11, Y+9	; 0x09
    30e6:	c8 84       	ldd	r12, Y+8	; 0x08
    30e8:	df 80       	ldd	r13, Y+7	; 0x07
    30ea:	ee 80       	ldd	r14, Y+6	; 0x06
    30ec:	fd 80       	ldd	r15, Y+5	; 0x05
    30ee:	0c 81       	ldd	r16, Y+4	; 0x04
    30f0:	1b 81       	ldd	r17, Y+3	; 0x03
    30f2:	aa 81       	ldd	r26, Y+2	; 0x02
    30f4:	b9 81       	ldd	r27, Y+1	; 0x01
    30f6:	ce 0f       	add	r28, r30
    30f8:	d1 1d       	adc	r29, r1
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	ed 01       	movw	r28, r26
    3106:	08 95       	ret

00003108 <_exit>:
    3108:	f8 94       	cli

0000310a <__stop_program>:
    310a:	ff cf       	rjmp	.-2      	; 0x310a <__stop_program>
